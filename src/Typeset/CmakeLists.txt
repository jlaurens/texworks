#[===============================================[
This is part of TWX build and test system.
https://github.com/TeXworks/texworks

This is `<...>/src/Typeset/CMakeLists.txt`

It can be used as standalone testing project,
testing auxiliary or source provider.

## Standalone testing project

When used as primary `CMakeLists.txt` it defines
a standalone test suite for `Twx::Typeset` namespace.

Usage from an external build directory:
```
cmake .../Typeset
cmake --build .
ctest .
```

## Subdirectory

When loaded by `add_subdirectory`.

### In testing context

It defines a test suite as part of a more general test.
See `/unit-tests/CMakeLists.txt`.

### In normal context

Output:
* `TwxTypeset_SOURCES`, a `;` separated list of full paths
* `TwxTypeset_HEADERS`, a `;` separated list of full paths

#]===============================================]

if ( NOT TWX_IS_BASED )

	# This file is primary
	cmake_minimum_required ( VERSION 3.1 )
	include (
		"${CMAKE_CURRENT_LIST_DIR}/../../Cmake/Include/TwxBase.cmake"
		NO_POLICY_SCOPE
	)
	project ( TwxTypesetTest )
	include ( TwxBase )

  set ( TWX_TEST ON	)
	set ( TwxTypeset_TEST_IS_ROOT ON )
	enable_testing ()
	set ( CMAKE_CXX_STANDARD 11 )
	# Tell CMake to run moc when necessary:
	set ( CMAKE_AUTOMOC ON )
	
	# As moc files are generated in the binary dir, tell CMake
	# to always look for includes there:
	set ( CMAKE_INCLUDE_CURRENT_DIR ON )
	include ( TwxQTLib )
elseif ( TWX_TEST )
	project ( TwxTypesetTest )
	include ( TwxBase )
endif ()

include ( SrcTwxTypesetSetup )

if ( NOT TWX_TEST )
	twx_export ( TwxTypeset_SOURCES )
	twx_export ( TwxTypeset_HEADERS )
	return ()
endif ()

include ( SrcTwxCoreSetup )

list (
	APPEND
	TwxTypeset_SOURCES
	${TwxCore_SOURCES}
	"${CMAKE_CURRENT_LIST_DIR}/Test/TwxTypesetTest.cpp"
)
list (
	APPEND
	TwxTypeset_HEADERS
	${TwxCore_HEADERS}
	"${CMAKE_CURRENT_LIST_DIR}/Test/TwxTypesetTest.h"
)

add_executable ( test_TwxTypeset )

twx_target_include_src ( test_TwxTypeset )

target_compile_definitions (
	test_TwxTypeset
	PRIVATE TwxTypeset_TEST
)

# if ( QT_VERSION_MAJOR EQUAL 6 )
# 	# Check for Qt6
# 	twx_append_QT ( REQUIRED Core5Compat )
# else ()
# 	if ( WIN32 AND NOT BUILD_SHARED_LIBS )
# 		twx_append_QT ( REQUIRED WindowsPlatformSupport )
# 	endif ()
# endif ()

target_link_libraries (
	test_TwxTypeset
	${QT_LIBRARIES}
)

include ( TwxWarning )
twx_warning_target ( test_TwxTypeset )

target_sources (
	test_TwxTypeset
	PRIVATE ${TwxTypeset_SOURCES} ${TwxTypeset_HEADERS}
)

include ( TwxTestCase )
twx_test_case ( test_TwxTypeset tws_working_directory )

add_test (
	NAME test_TwxTypeset
	COMMAND test_TwxTypeset
	WORKING_DIRECTORY
		"${tws_working_directory}"
)

add_executable (
	pdftex_TwxTypeset
	${CMAKE_CURRENT_LIST_DIR}/Test/main.cpp
)

add_executable (
	engine_TwxTypeset
	${CMAKE_CURRENT_LIST_DIR}/Test/main.cpp
)

set_target_properties (
	pdftex_TwxTypeset engine_TwxTypeset
  PROPERTIES
		RUNTIME_OUTPUT_DIRECTORY
		"${tws_working_directory}"
)

unset ( tws_working_directory )

# ANCHOR - Summary
# =======

if ( TwxTypeset_TEST_IS_ROOT )

	message ( "" )

	include ( TwxConfigLog )

	twx_config_begin (
		BOLD_GREEN
	"${PROJECT_NAME} test suite has been configured \
	(CMake ${CMAKE_VERSION}, \
	${CMAKE_CXX_COMPILER_ID} \
	${CMAKE_CXX_COMPILER_VERSION}):\n"
		)
	
	twx_config_begin ( BOLD_MAGENTA "Version info" )
	twx_config_log ( "Qt" ${QT_VERSION_MAJOR}.${QT_VERSION_MINOR}.${QT_VERSION_PATCH} )
	twx_config_end ()

	twx_config_log ( "Compiler optimization:" ${CMAKE_BUILD_TYPE} )
	twx_config_log ( "" )

	twx_config_begin ( BOLD_BLUE "Libraries" VERBOSE )
	twx_config_log_kv ( "Qt${QT_VERSION_MAJOR}" VAR QT_LIBRARIES )
	twx_config_end ()

	twx_config_begin ( BOLD_BLUE "Build settings" VERBOSE )
	get_target_property (
		COMPILE_DEFINITIONS
		test_TwxTypeset
		COMPILE_DEFINITIONS
	)
	twx_config_log_kv ( "Compile definitions" VAR COMPILE_DEFINITIONS )
	get_target_property (
		COMPILE_OPTIONS
		test_TwxTypeset
		COMPILE_OPTIONS
	)
	twx_config_log_kv ( "Compile options" VAR COMPILE_OPTIONS )
	twx_config_end ()

	twx_config_begin ( BOLD_BLUE "Files" VERBOSE )
	twx_config_log_kv ( "SOURCES" VAR TwxTypeset_SOURCES )
	twx_config_log_kv ( "HEADERS" VAR TwxTypeset_HEADERS )
	twx_config_end ()

	twx_config_end ( NO_EOL )

endif ()
