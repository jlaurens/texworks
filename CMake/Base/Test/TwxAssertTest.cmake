#[===============================================[/*
This is part of the TWX build and test system.
https://github.com/TeXworks/texworks
(C)  JL 2023
*/
/** @file
  * @brief TwxAssertLib test suite.
  *
  * First test.
  *//*
#]===============================================]

if ( DEFINED //CMake/Include/Test/TwxAssertTest.cmake )
  return ()
endif ()

set ( //CMake/Include/Test/TwxAssertTest.cmake ON )

include ( "${CMAKE_CURRENT_LIST_DIR}/../TwxAssertLib.cmake" )

include ( "${CMAKE_CURRENT_LIST_DIR}/TwxCoreTest.cmake" )

message ( STATUS "TwxAssertLib test...")

block ()

set ( CMAKE_MESSAGE_LOG_LEVEL TRACE )
list ( APPEND CMAKE_MESSAGE_CONTEXT Assert )
set ( CMAKE_MESSAGE_CONTEXT_SHOW ON )

message ( STATUS "twx_assert_undefined" )
block ()
list ( APPEND CMAKE_MESSAGE_CONTEXT undefined )
twx_test_fatal_assert_passed ()
if ( TRUE )
  twx_test_fatal ()
  unset ( dummy )
  twx_assert_undefined ( dummy )
  twx_fatal_catched ( IN_VAR v )
  twx_test_fatal_assert_passed ()
  twx_test_fatal ()
  set ( dummy "" )
  twx_assert_undefined ( dummy )
  twx_test_fatal_assert_failed ()
endif ()
twx_test_fatal ()
endblock ()

message ( STATUS "twx_assert_defined" )
block ()
list ( APPEND CMAKE_MESSAGE_CONTEXT defined )
 twx_test_fatal_assert_passed ()
if ( TRUE )
  twx_test_fatal ()
  set ( dummy "" )
  twx_assert_defined ( dummy )
  twx_fatal_catched ( IN_VAR v )
  twx_test_fatal_assert_passed ()
  twx_test_fatal ()
  unset ( dummy )
  twx_assert_defined ( dummy )
  twx_test_fatal_assert_failed ()
endif ()
twx_test_fatal ()
endblock ()

message ( STATUS "twx_assert_compare(yes)" )
block ()
list ( APPEND CMAKE_MESSAGE_CONTEXT compare_yes )
twx_test_fatal_assert_passed ()
if ( TRUE )
  twx_test_fatal ()
  twx_assert_compare ( 1 < 2 )
  twx_fatal_catched ( IN_VAR v )
  if ( NOT v STREQUAL "" )
    message ( FATAL_ERROR "FAILURE \"${v}\"" )
  endif ()
  twx_test_fatal ()
  twx_assert_compare ( 1 <= 2 )
  twx_fatal_catched ( IN_VAR v )
  if ( NOT v STREQUAL "" )
    message ( FATAL_ERROR "FAILURE \"${v}\"" )
  endif ()
  twx_test_fatal ()
  twx_assert_compare ( 2 <= 2 )
  twx_fatal_catched ( IN_VAR v )
  if ( NOT v STREQUAL "" )
    message ( FATAL_ERROR "FAILURE \"${v}\"" )
  endif ()
  twx_test_fatal ()
  twx_assert_compare ( 2 == 2 )
  twx_fatal_catched ( IN_VAR v )
  if ( NOT v STREQUAL "" )
    message ( FATAL_ERROR "FAILURE \"${v}\"" )
  endif ()
  twx_test_fatal ()
  twx_assert_compare ( 2 = 2 )
  twx_fatal_catched ( IN_VAR v )
  if ( NOT v STREQUAL "" )
    message ( FATAL_ERROR "FAILURE \"${v}\"" )
  endif ()
  twx_test_fatal ()
  twx_assert_compare ( 2 >= 2 )
  twx_fatal_catched ( IN_VAR v )
  if ( NOT v STREQUAL "" )
    message ( FATAL_ERROR "FAILURE \"${v}\"" )
  endif ()
  twx_test_fatal ()
  twx_assert_compare ( 3 >= 2 )
  twx_fatal_catched ( IN_VAR v )
  if ( NOT v STREQUAL "" )
    message ( FATAL_ERROR "FAILURE \"${v}\"" )
  endif ()
  twx_test_fatal ()
  twx_assert_compare ( 3 > 2 )
  twx_fatal_catched ( IN_VAR v )
  if ( NOT v STREQUAL "" )
    message ( FATAL_ERROR "FAILURE \"${v}\"" )
  endif ()
endif ()
twx_test_fatal ()
endblock ()

message ( STATUS "twx_assert_compare(NO)" )
block ()
list ( APPEND CMAKE_MESSAGE_CONTEXT compare_no )
twx_test_fatal_assert_passed ()
if ( TRUE )
  twx_test_fatal ()
  twx_assert_compare ( 3 < 2 )
  twx_test_fatal_assert_failed ()
  twx_test_fatal ()
  twx_assert_compare ( 3 <= 2 )
  twx_test_fatal_assert_failed ()
  twx_test_fatal ()
  twx_assert_compare ( 3 == 2 )
  twx_test_fatal_assert_failed ()
  twx_test_fatal ()
  twx_assert_compare ( 3 = 2 )
  twx_test_fatal_assert_failed ()
  twx_test_fatal ()
  twx_assert_compare ( 2 >= 3 )
  twx_test_fatal_assert_failed ()
  twx_test_fatal ()
  twx_assert_compare ( 2 > 3 )
  twx_test_fatal_assert_failed ()
endif ()
twx_test_fatal ()
endblock ()

message ( STATUS "twx_assert_compare(pipe/yes)" )
block ()
list ( APPEND CMAKE_MESSAGE_CONTEXT compare_pipe_yes )
twx_test_fatal_assert_passed ()
if ( TRUE )
  twx_test_fatal ()
  twx_assert_compare ( 1 < 2 < 3 )
  twx_fatal_catched ( IN_VAR v )
  twx_test_fatal_assert_passed ()
  twx_test_fatal ()
  twx_assert_compare ( 1 < 2 > 1 )
  twx_fatal_catched ( IN_VAR v )
  twx_test_fatal_assert_passed ()
endif ()
twx_test_fatal ()
endblock ()

message ( STATUS "twx_assert_compare(pipe/no)" )
block ()
list ( APPEND CMAKE_MESSAGE_CONTEXT compare_pipe_no )
twx_test_fatal_assert_passed ()
if ( TRUE )
  twx_test_fatal ()
  twx_assert_compare ( 3 < 2 < 3 )
  twx_test_fatal_assert_failed ()
  twx_test_fatal ()
  twx_assert_compare ( 1 < 2 < 1 )
  twx_test_fatal_assert_failed ()
endif ()
twx_test_fatal ()
endblock ()

message ( STATUS "twx_assert_non_void" )
block ()
list ( APPEND CMAKE_MESSAGE_CONTEXT non_void )
twx_test_fatal_assert_passed ()
if ( TRUE )
  twx_test_fatal ()
  set ( foo bar )
  twx_assert_non_void ( foo )
  twx_fatal_catched ( IN_VAR v )
  twx_test_fatal_assert_passed ()
  twx_test_fatal ()
  set ( foo bar )
  set ( bar baz )
  twx_assert_non_void ( foo bar )
  twx_fatal_catched ( IN_VAR v )
  twx_test_fatal_assert_passed ()
  twx_test_fatal ()
  unset ( foo )
  unset ( bar )
  twx_assert_non_void ( foo )
  twx_fatal_catched ( IN_VAR v )
  if ( v STREQUAL "" )
    message ( STATUS FATAL_ERROR "FAILURE" )
  endif ()
  twx_test_fatal ()
  set ( foo )
  twx_assert_non_void ( foo )
  twx_test_fatal_assert_failed ()
  twx_test_fatal ()
  unset ( foo )
  set ( bar baz )
  twx_assert_non_void ( foo bar )
  twx_test_fatal_assert_failed ()
  twx_test_fatal ()
  unset ( foo )
  set ( bar baz )
  twx_assert_non_void ( bar foo )
  twx_test_fatal_assert_failed ()
endif ()
twx_test_fatal ()
endblock ()

message ( STATUS "twx_assert_0" )
block ()
list ( APPEND CMAKE_MESSAGE_CONTEXT 0 )
twx_test_fatal_assert_passed ()
if ( TRUE )
  twx_test_fatal ()
  set ( foo )
  twx_assert_0 ( "${foo}" )
  twx_test_fatal_assert_failed ()
  twx_test_fatal ()
  set ( foo )
  set ( bar 0 )
  twx_assert_0 ( "${foo}" "${bar}" )
  twx_test_fatal_assert_failed ()
  twx_test_fatal ()
  set ( foo )
  set ( bar 0 )
  twx_assert_0 ( "${bar}" "${foo}" )
  twx_test_fatal_assert_failed ()
  twx_test_fatal ()
  set ( foo "0" )
  twx_assert_0 ( "${foo}" )
  twx_fatal_catched ( IN_VAR v )
  twx_test_fatal_assert_passed ()
  twx_test_fatal ()
  set ( foo "wizz" )
  twx_assert_0 ( "${foo}" )
  twx_test_fatal_assert_failed ()
endif ()
twx_test_fatal ()
endblock ()

message ( STATUS "twx_assert_true/twx_assert_false" )
block ()
list ( APPEND CMAKE_MESSAGE_CONTEXT true_false )
twx_test_fatal_assert_passed ()
if ( TRUE )
  twx_test_fatal ()
  set ( foo ON )
  twx_assert_true ( "${foo}" )
  twx_fatal_catched ( IN_VAR v )
  if ( NOT v STREQUAL "" )
    message ( FATAL_ERROR "FAILURE \"${v}\"" )
  endif ()
  set ( foo OFF )
  twx_test_fatal ()
  twx_assert_false ( "${foo}" )
  twx_fatal_catched ( IN_VAR v )
  if ( NOT v STREQUAL "" )
    message ( FATAL_ERROR "FAILURE \"${v}\"" )
  endif ()
  twx_test_fatal ()
  set ( foo ON )
  twx_assert_false ( "${foo}" )
  twx_test_fatal_assert_failed ()
  set ( foo OFF )
  twx_test_fatal ()
  twx_assert_true ( "${foo}" )
  twx_test_fatal_assert_failed ()
  twx_test_fatal ()
  set ( foo OFF )
  twx_assert_true ( "${foo}" )
  twx_test_fatal_assert_failed ()
  twx_test_fatal ()
  twx_assert_false ( "" )
  twx_fatal_catched ( IN_VAR v )
  if ( v STREQUAL "" )
    message ( FATAL_ERROR "FAILURE \"${v}\"" )
  endif ()
  twx_test_fatal ()
  set ( foo ON )
  set ( bar ON )
  twx_assert_true ( "${foo}" "${bar}" )
  twx_fatal_catched ( IN_VAR v )
  twx_test_fatal_assert_passed ()
  twx_test_fatal ()
  set ( foo )
  set ( bar ON )
  twx_assert_true ( "" "${bar}" )
  twx_fatal_catched ( IN_VAR v )
  if ( NOT v STREQUAL "" )
    message ( FATAL_ERROR "FAILURE \"${v}\"" )
  endif ()
  twx_test_fatal ()
  set ( foo )
  set ( bar ON )
  twx_assert_true ( "${bar}" "" )
  twx_fatal_catched ( IN_VAR v )
  if ( NOT v STREQUAL "" )
    message ( FATAL_ERROR "FAILURE \"${v}\"" )
  endif ()
  twx_test_fatal ()
  set ( foo "ON" )
  twx_assert_true ( "${foo}" )
  twx_fatal_catched ( IN_VAR v )
  if ( NOT v STREQUAL "" )
    message ( FATAL_ERROR "FAILURE \"${v}\"" )
  endif ()
  twx_test_fatal ()
  set ( foo "wizz" )
  if ( wizz )
    message ( TRUE )
  endif ()
  twx_assert_true ( "wizz" )
  twx_test_fatal_assert_failed ()
  twx_test_fatal ()
  set ( foo ON )
  twx_assert_true ( foo )
  twx_fatal_catched ( IN_VAR v )
  if ( NOT v STREQUAL "" )
    message ( FATAL_ERROR "FAILURE \"${v}\"" )
  endif ()
  twx_test_fatal ()
  set ( foo ON )
  twx_assert_false ( foo )
  twx_test_fatal_assert_failed ()
  twx_test_fatal ()
  set ( foo N )
  twx_assert_false ( foo )
  twx_fatal_catched ( IN_VAR v )
  if ( NOT v STREQUAL "" )
    message ( FATAL_ERROR "FAILURE \"${v}\"" )
  endif ()
  twx_test_fatal ()
  set ( foo N )
  twx_assert_true ( foo )
  twx_test_fatal_assert_failed ()
endif ()
twx_test_fatal ()
endblock ()

message ( STATUS "twx_assert_exists" )
block ()
list ( APPEND CMAKE_MESSAGE_CONTEXT exists )
twx_test_fatal_assert_passed ()
if ( TRUE )
  twx_test_fatal ()
  twx_assert_exists ( "${CMAKE_CURRENT_LIST_DIR}/" )
  twx_fatal_catched ( IN_VAR v )
  if ( NOT v STREQUAL "" )
    message ( FATAL_ERROR "FAILURE \"${v}\"" )
  endif ()
  twx_test_fatal ()
  twx_assert_exists ( "${CMAKE_CURRENT_LIST_DIR}/NO_FILE_AT_THIS_PATH" )
  twx_test_fatal_assert_failed ()
endif ()
twx_test_fatal ()
endblock ()

message ( STATUS "twx_assert_target" )
block ()
list ( APPEND CMAKE_MESSAGE_CONTEXT target )
set ( TWX_FATAL_CATCH ON )
twx_test_fatal ()
if ( NOT TARGET TwxAssertTest.cmakeDummyTarget )
  twx_assert_target ( "TwxAssertTest.cmakeDummyTarget" )
  twx_fatal_catched ( IN_VAR v )
  if ( v STREQUAL "" )
    message ( FATAL_ERROR "FAILURE" )
  endif ()
  add_custom_target ( "TwxAssertTest.cmakeDummyTarget" )
  twx_test_fatal ()
  twx_assert_target ( "TwxAssertTest.cmakeDummyTarget" )
  twx_fatal_catched ( IN_VAR v )
  if ( NOT v STREQUAL "" )
    message ( FATAL_ERROR "FAILURE \"${v}\"" )
  endif ()
endif ()
twx_test_fatal ()
endblock ()

endblock ()

message ( STATUS "TwxAssertLib test... DONE")

#*/
