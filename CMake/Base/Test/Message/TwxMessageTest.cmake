#[===============================================[/*
This is part of the TWX build and test system.
https://github.com/TeXworks/texworks
(C)  JL 2023
*/
/** @file
  * @brief TwxMessageLib test suite.
  *
  *//*
#]===============================================]

include_guard ( GLOBAL )

twx_test_suite_push ()
block ()

twx_fatal_test ()

twx_test_unit_push ( CORE "mode_index" )
if ( /TWX/TEST/UNIT.RUN )
  block ()
  set ( i 0 )
  foreach ( x ${/TWX/CONST/MESSAGE/MODES} )
    twx_test_simple_check ( "/TWX/CONST/MESSAGE/MODES[${i}]=${x}" )
    list ( FIND /TWX/CONST/MESSAGE/MODES "${x}" K )
    twx_message_mode_index ( "${x}" IN_VAR ans_ )
    twx_expect_equal_number ( "${ans_}" "${i}" )
    twx_test_simple_pass ()
    math ( EXPR i "${i}+1" )
  endforeach ()
  endblock ()
endif ()
twx_test_unit_pop ()

twx_test_unit_push ( CORE "mode_order" )
if ( /TWX/TEST/UNIT.RUN )
  block ()
  twx_fatal_test ()
  twx_test_simple_check ( "NOTICE <=> TRACE")
  twx_message_mode_order ( NOTICE <=> TRACE IN_VAR ans_ )
  twx_expect_equal_number ( "${ans_}" -1 )
  twx_test_simple_pass ()
  twx_test_simple_check ( "NOTICE <=> NOTICE")
  twx_message_mode_order ( NOTICE <=> NOTICE IN_VAR ans_ )
  twx_expect_equal_number ( "${ans_}" 0 )
  twx_test_simple_pass ()
  twx_test_simple_check ( "TRACE <=> NOTICE")
  twx_message_mode_order ( TRACE <=> NOTICE IN_VAR ans_ )
  twx_expect_equal_number ( "${ans_}" 1 )
  twx_test_simple_pass ()
  twx_test_simple_check ( "NoTICE <=> TRACE")
  twx_message_mode_order ( NoTICE <=> TRACE IN_VAR ans_ )
  twx_assert_undefined ( ans_ )
  twx_test_simple_pass ()
  twx_test_simple_check ( "NOTICE <=> TRaCE")
  twx_message_mode_order ( NOTICE <=> TRaCE IN_VAR ans_ )
  twx_assert_undefined ( ans_ )
  twx_test_simple_pass ()
  endblock ()
endif ()
twx_test_unit_pop ()

twx_test_unit_push ( CORE "mode_compare" )
if ( /TWX/TEST/UNIT.RUN )
  block ()
  twx_test_simple_check ( "0==0" )
  twx_math_evaluate ( "0==0" IN_VAR ans_ )
  twx_var_log ( ans_ )
  twx_assert_true ( ans_ )
  twx_test_simple_pass ()
  twx_test_simple_check ( "0!=0" )
  twx_math_evaluate ( "0!=0" IN_VAR ans_ )
  twx_var_log ( ans_ )
  twx_assert_true ( ans_ )
  twx_test_simple_fail ()
  twx_test_simple_check ( "0<>0" )
  twx_math_evaluate ( "0<>0" IN_VAR ans_ )
  twx_var_log ( ans_ )
  twx_assert_true ( ans_ )
  twx_test_simple_fail ()
  twx_test_simple_check ( "0!=0" )
  twx_math_evaluate ( "0!=0" IN_VAR ans_ )
  twx_var_log ( ans_ )
  twx_assert_false ( ans_ )
  twx_test_simple_pass ()
  twx_test_simple_check ( "0<>0" )
  twx_math_evaluate ( "0<>0" IN_VAR ans_ )
  twx_var_log ( ans_ )
  twx_assert_false ( ans_ )
  twx_test_simple_pass ()
  foreach ( mode_ ${/TWX/CONST/MESSAGE/MODES} )
    set ( op ">" )
    foreach ( l ${/TWX/CONST/MESSAGE/MODES} )
      if ( "${l}" STREQUAL "${mode_}" )
        twx_test_simple_check ( "${l} == ${mode_}" )
        twx_message_mode_compare ( "${l}" "==" "${mode_}" IN_VAR ans_ )
        twx_assert_true ( ans_ )
        twx_test_simple_pass ()
        twx_test_simple_check ( "${l} = ${mode_}" )
        twx_message_mode_compare ( "${l}" "="  "${mode_}" IN_VAR ans_ )
        twx_assert_true ( ans_ )
        twx_test_simple_pass ()
        twx_test_simple_check ( "${l} != ${mode_}" )
        twx_message_mode_compare ( "${l}" "!=" "${mode_}" IN_VAR ans_ )
        twx_assert_false ( ans_ )
        twx_test_simple_pass ()
        twx_test_simple_check ( "${l} <> ${mode_}" )
        twx_message_mode_compare ( "${l}" "<>" "${mode_}" IN_VAR ans_ )
        twx_assert_false ( ans_ )
        twx_test_simple_pass ()
        set ( op "<" )
        continue ()
      endif ()
      # # message ( TR@CE "${mode_} ${op} ${l}" )
      twx_test_simple_check ( "${l} ${op} ${mode_}" )
      twx_message_mode_compare ( "${mode_}" "${op}" "${l}" IN_VAR ans_ )
      twx_assert_true ( ans_ )
      twx_test_simple_pass ()
    endforeach ()
  endforeach ()
  endblock ()
endif ()
twx_test_unit_pop ()

twx_test_unit_push ( CORE prettify )
if ( /TWX/TEST/UNIT.RUN )
  block ()
  twx_message_log ( STATUS "THIS IS A TEST")
  twx_fatal_test ()
  twx_test_simple_check ( "No command" )
  twx_message_register_prettifier ( TwxMessageTest )
  twx_test_simple_fail ()
  function ( TwxMessageTest_prettify m IN_VAR v )
    # # message ( TR@CE "Ugly: ${m}")
    string ( REPLACE "a" "A" m "${m}" )
    # # message ( TR@CE "Pretty: ${m}")
    set ( ${v} "${m}" PARENT_SCOPE )
  endfunction ()
  twx_test_simple_check ( "Register" )
  twx_message_register_prettifier ( TwxMessageTest )
  twx_test_simple_pass ()
  twx_test_simple_check ( "msg 1" )
  twx_message_prettify ( "b" "a" "c" IN_VAR msg )
  twx_expect_equal_string ( "${msg}" "b;A;c" )
  twx_expect ( msg "b;A;c" )
  twx_test_simple_pass ()
  twx_test_simple_check ( "Unregister" )
  twx_message_unregister_prettifier ( TwxMessageTest )
  twx_test_simple_pass ()
  twx_test_simple_check ( "msg 2" )
  twx_message_prettify ( "b" "a" "c" IN_VAR msg )
  twx_expect_equal_string ( "${msg}" "b;a;c" )
  twx_fatal_assert_pass ()
  endblock ()
endif ()
twx_test_unit_pop ()

endblock ()
twx_test_suite_pop ()

#/*
