#[===============================================[/*
This is part of the TWX build and test system.
https://github.com/TeXworks/texworks
(C)  JL 2023
*/
/** @file
  * @brief TwxSplitLib test suite.
  *
  *//*
#]===============================================]

include_guard ( GLOBAL )

message ( STATUS "TwxSplitLib test...")

include ( "${CMAKE_CURRENT_LIST_DIR}/../../TwxSplitLib.cmake" )

include ( "${CMAKE_CURRENT_LIST_DIR}/../TwxCore/TwxCoreTest.cmake" )
include ( "${CMAKE_CURRENT_LIST_DIR}/../TwxAssert/TwxAssertTest.cmake" )
include ( "${CMAKE_CURRENT_LIST_DIR}/../TwxExpect/TwxExpectTest.cmake" )
include ( "${CMAKE_CURRENT_LIST_DIR}/../TwxArg/TwxArgTest.cmake" )

block ()
twx_test_suite_will_begin ()

# message ( STATUS "ARGC" )
# block ()
# list ( APPEND CMAKE_MESSAGE_CONTEXT ARGC )
# function ( TwxSplitTest_ARGC a )
#   set ( b 4 )
#   if ( ${ARGC} GREATER a )
#     message ( STATUS "1) ARGC > ${a}")
#   else ()
#     message ( STATUS "1) ARGC <= ${a}")
#   endif ()
#   if ( ARGC GREATER a )
#     message ( STATUS "2) ARGC > ${a}")
#   else ()
#     message ( STATUS "2) ARGC <= ${a}")
#   endif ()
# endfunction ()
# set ( a b )
# set ( b 1 )
# TwxSplitTest_ARGC ( 1 2 3 )
# endblock()

message ( STATUS "twx_split_kv" )
block ()
list ( APPEND CMAKE_MESSAGE_CONTEXT twx_split_kv )
twx_test_fatal_assert_passed ()
if ( TRUE )
  # Failure: two many arguments
  twx_test_fatal ()
  twx_split_kv ( a b c d e f ) # `twx_split_kv ( 1 2 3 4 5 6 )` has side effects
  twx_test_fatal_assert_failed ()
  # Failure: bad keyword 1
  twx_test_fatal ()
  twx_split_kv ( kv IN_KEYx k IN_VALUE v )
  twx_test_fatal_assert_failed ()
  # Failure: bad keyword 2
  twx_test_fatal ()
  twx_split_kv ( kv IN_KEY k IN_VALUEx v )
  twx_test_fatal_assert_failed ()
  # Failure: bad variable names
  twx_test_fatal ()
  twx_assert_variable_name ( <k> )
  twx_test_fatal_assert_failed ()
  twx_test_fatal ()
  twx_assert_variable_name ( " " )
  twx_test_fatal_assert_failed ()
  twx_test_fatal ()
  twx_split_kv ( kv IN_KEY <k> IN_VALUE v )
  twx_test_fatal_assert_failed ()
  twx_test_fatal ()
  twx_split_kv ( kv IN_KEY k IN_VALUE <v> )
  twx_test_fatal_assert_failed ()
  # Failure: not the same variable names
  twx_test_fatal ()
  twx_split_kv ( kv IN_KEY w IN_VALUE w )
  twx_test_fatal_assert_failed ()
  # Success: Normal call
  twx_test_fatal ()
  unset ( k )
  unset ( v )
  twx_assert_undefined ( k v )
  twx_test_fatal_assert_passed ()
  twx_split_kv ( key=value IN_KEY k IN_VALUE v )
  twx_test_fatal_assert_passed ()
  # Success: Normal call, value with "="
  twx_test_fatal ()
  set ( k )
  set ( v )
  twx_assert_undefined ( k v )
  twx_test_fatal_assert_passed ()
  twx_test_fatal ()
  twx_split_kv ( key=va=ue IN_KEY k IN_VALUE v )
  twx_expect ( k key )
  twx_expect ( v va=ue )
  twx_test_fatal_assert_passed ()
  # Failure: no key
  twx_test_fatal ()
  set ( k )
  set ( v )
  twx_split_kv ( =value IN_KEY k IN_VALUE v )
  twx_test_fatal_assert_failed ()
  # Success: only key
  twx_test_fatal ()
  set ( k )
  set ( v )
  twx_assert_undefined ( k v )
  twx_test_fatal ()
  twx_split_kv ( key IN_KEY k IN_VALUE v )
  twx_expect ( k key )
  twx_assert_undefined ( v )
  twx_test_fatal_assert_passed ()
endif ()
twx_test_fatal_assert_passed ()
endblock ()

message ( STATUS "twx_split_comparison" )
block ()
list ( APPEND CMAKE_MESSAGE_CONTEXT twx_split_kv )
twx_test_fatal_assert_passed ()
if ( TRUE )
  # Failure: two few arguments
  twx_test_fatal ()
  twx_split_comparison ( a b c d e f g h )
  twx_test_fatal_assert_failed ()

  # Failure: two many arguments
  twx_test_fatal ()
  twx_split_comparison ( a b c d e f g h i j )
  twx_test_fatal_assert_failed ()
  # Failure: bad keyword 1
  twx_test_fatal ()
  twx_split_comparison ( a IN_LEFTx b IN_OP c IN_RIGHT d IN_NEGATE e )
  twx_test_fatal_assert_failed ()
  twx_test_fatal ()
  twx_split_comparison ( a IN_LEFT b IN_OPs c IN_RIGHT d IN_NEGATE e )
  twx_test_fatal_assert_failed ()
  twx_test_fatal ()
  twx_split_comparison ( a IN_LEFT b IN_OP c IN_RIGHT d IN_NEGATE e )
  twx_test_fatal_assert_failed ()
  twx_test_fatal ()
  twx_split_comparison ( a IN_LEFT b IN_OP c IN_RIGHTd d IN_NEGATE e )
  twx_test_fatal_assert_failed ()
  twx_test_fatal ()
  twx_split_comparison ( a IN_LEFT b IN_OP c IN_RIGHT d IN_NEGATEq e )
  twx_test_fatal_assert_failed ()
  # Failure: bad variable names
  twx_test_fatal ()
  twx_split_comparison ( a IN_LEFT b! IN_OP c IN_RIGHT d IN_NEGATE e )
  twx_test_fatal_assert_failed ()
  twx_test_fatal ()
  twx_split_comparison ( a IN_LEFT b IN_OP c! IN_RIGHT d IN_NEGATE e )
  twx_test_fatal_assert_failed ()
  twx_test_fatal ()
  twx_split_comparison ( a IN_LEFT b IN_OP c IN_RIGHT d! IN_NEGATE e )
  twx_test_fatal_assert_failed ()
  twx_test_fatal ()
  twx_split_comparison ( a IN_LEFT b IN_OP c IN_RIGHT d IN_NEGATE e! )
  twx_test_fatal_assert_failed ()
  # Failure: not the same variable names
  twx_test_fatal ()
  twx_split_comparison ( a IN_LEFT b IN_OP b IN_RIGHT d IN_NEGATE e )
  twx_test_fatal_assert_failed ()
  twx_test_fatal ()
  twx_split_comparison ( a IN_LEFT b IN_OP c IN_RIGHT b IN_NEGATE e )
  twx_test_fatal_assert_failed ()
  twx_test_fatal ()
  twx_split_comparison ( a IN_LEFT b IN_OP c IN_RIGHT d IN_NEGATE b )
  twx_test_fatal_assert_failed ()
  twx_test_fatal ()
  twx_split_comparison ( a IN_LEFT b IN_OP c IN_RIGHT c IN_NEGATE e )
  twx_test_fatal_assert_failed ()
  twx_test_fatal ()
  twx_split_comparison ( a IN_LEFT b IN_OP c IN_RIGHT d IN_NEGATE c )
  twx_test_fatal_assert_failed ()
  twx_test_fatal ()
  twx_split_comparison ( a IN_LEFT b IN_OP c IN_RIGHT d IN_NEGATE d )
  twx_test_fatal_assert_failed ()
  # Success: Normal call
  twx_test_fatal ()
  set ( l )
  set ( o )
  set ( r )
  set ( n )
  twx_assert_undefined ( l o r n )
  set ( argn_ IN_LEFT l IN_OP o IN_RIGHT r IN_NEGATE n )
  twx_split_comparison ( ll=rr ${argn_} )
  twx_test_fatal_assert_passed ()
  twx_expect ( l ll )
  twx_expect ( o EQUAL )
  twx_expect ( r rr )
  twx_assert_false ( n )
  function ( twx_split_comparison_test comparison l_ o_ r_ n_ )
    twx_split_comparison ( "${comparison}" IN_LEFT l IN_OP o IN_RIGHT r IN_NEGATE n )
    twx_expect ( l "${l_}" )
    twx_expect ( o "${o_}" )
    twx_expect ( r "${r_}" )
    cmake_language ( CALL "${n_}" "${n}" )
  endfunction ()
  twx_split_comparison_test ( ll=rr ll EQUAL rr twx_assert_false )
  twx_split_comparison_test ( ll==rr ll EQUAL rr twx_assert_false )
  twx_split_comparison_test ( ll<rr ll LESS rr twx_assert_false )
  twx_split_comparison_test ( ll<=rr ll LESS_EQUAL rr twx_assert_false )
  twx_split_comparison_test ( ll>rr ll GREATER rr twx_assert_false )
  twx_split_comparison_test ( ll>=rr ll GREATER_EQUAL rr twx_assert_false )
  twx_split_comparison_test ( ll!=rr ll EQUAL rr twx_assert_true )
  twx_split_comparison_test ( ll<>rr ll EQUAL rr twx_assert_true )
  twx_split_comparison_test ( !ll=rr ll EQUAL rr twx_assert_true )
  twx_split_comparison_test ( !ll==rr ll EQUAL rr twx_assert_true )
  twx_split_comparison_test ( !ll<rr ll LESS rr twx_assert_true )
  twx_split_comparison_test ( !ll<=rr ll LESS_EQUAL rr twx_assert_true )
  twx_split_comparison_test ( !ll>rr ll GREATER rr twx_assert_true )
  twx_split_comparison_test ( !ll>=rr ll GREATER_EQUAL rr twx_assert_true )
  twx_split_comparison_test ( !ll!=rr ll EQUAL rr twx_assert_false )
  twx_split_comparison_test ( !ll<>rr ll EQUAL rr twx_assert_false )
  # Failure: bad comparison
  twx_test_fatal ()
  twx_split_comparison ( kk===ll IN_LEFT l IN_OP o IN_RIGHT r IN_NEGATE n )
  twx_test_fatal_assert_failed ()
  # Failure: No comparison
  twx_test_fatal ()
  twx_split_comparison ( kkll IN_LEFT l IN_OP o IN_RIGHT r IN_NEGATE n )
  twx_test_fatal_assert_failed ()
endif ()
twx_test_fatal_assert_passed ()
endblock ()

twx_test_suite_did_end ()
endblock ()

message ( STATUS "TwxSplitLib test... DONE")

#*/
