#[===============================================[/*
This is part of the TWX build and test system.
https://github.com/TeXworks/texworks
(C)  JL 2023
*/
/** @file
  * @brief TwxTreeLib test suite.
  *
  *//*
#]===============================================]

if ( DEFINED //CMake/Include/Test/TwxTreeTest.cmake )
  return ()
endif ()

set ( //CMake/Include/Test/TwxTreeTest.cmake ON )

message ( STATUS "TwxTreeLib test...")

include ( "${CMAKE_CURRENT_LIST_DIR}/../TwxTreeLib.cmake" )

include ( "${CMAKE_CURRENT_LIST_DIR}/TwxCoreTest.cmake" )
include ( "${CMAKE_CURRENT_LIST_DIR}/TwxAssertTest.cmake" )
include ( "${CMAKE_CURRENT_LIST_DIR}/TwxExpectTest.cmake" )

block ()

set ( CMAKE_MESSAGE_LOG_LEVEL DEBUG )
list ( APPEND CMAKE_MESSAGE_CONTEXT Tree )
set ( CMAKE_MESSAGE_CONTEXT_SHOW ON )

twx_tree_assert ( TWX_TREE )
twx_assert_true ( "${TWX_IS_TREE_TWX_TREE}" )

message ( STATUS "twx_tree_init/1" )
block ()
list ( APPEND CMAKE_MESSAGE_CONTEXT init/1 )
unset ( A/ )
twx_tree_init ( A/ )
twx_tree_assert ( A/ )
twx_assert_true ( "${TWX_IS_TREE_A/}" )
twx_expect_equal_string ( A/ "${TWX_TREE_HEADER}" )
endblock ()

message ( STATUS "twx_tree_init(1-2)" )
block ()
list ( APPEND CMAKE_MESSAGE_CONTEXT init/2 )
set ( A/ dummy )
twx_tree_init ( A/ )
twx_tree_assert ( A/ )
twx_assert_true ( "${TWX_IS_TREE_A/}" )
twx_expect_equal_string ( A/ "${TWX_TREE_HEADER}" )
endblock ()

message ( STATUS "Test twx_tree_get/1" )
block ()
list ( APPEND CMAKE_MESSAGE_CONTEXT get/1 )
unset ( A/ )
twx_tree_init ( A/ )
set ( A.whatever dummy )
set ( TWX_IS_TREE_A.whatever dummy )
twx_tree_get ( TREE A/ IN_VAR A.whatever KEY whatever )
twx_assert_undefined ( A.whatever )
twx_assert_undefined ( TWX_IS_TREE_A.whatever )
set ( A.whenever dummy )
set ( TWX_IS_TREE_A.whenever dummy )
twx_tree_get ( TREE A/ KEY whenever )
twx_assert_undefined ( A.whenever )
twx_assert_undefined ( TWX_IS_TREE_A.whenever )
endblock ()

message ( STATUS "Test twx_tree_set/1" )
block ()
list ( APPEND CMAKE_MESSAGE_CONTEXT set/1 )
unset ( A/ )
twx_tree_set ( TREE A/ key=value )
twx_expect_equal_string ( A/ "${TWX_TREE_HEADER}${TWX_TREE_GROUP_SEP}key${TWX_TREE_RECORD_SEP}value" )
set ( A.key dummy )
twx_tree_get ( TREE A/ IN_VAR A.key KEY key )
twx_expect_equal_string ( A.key value )
set ( A.key dummy )
twx_tree_get ( TREE A/ KEY key )
twx_expect_equal_string ( A.key value )
endblock ()

message ( STATUS "Test twx_tree_set/remove/1" )
block ()
list ( APPEND CMAKE_MESSAGE_CONTEXT set/remove/1 )
twx_tree_init ( A/ )
twx_tree_set ( TREE A/ key=value )
twx_regex_escape ( "key" IN_VAR scp_key_ )
twx_expect_equal_string ( scp_key_ "key" )
twx_expect_equal_string ( A/ "^(.*)${TWX_TREE_GROUP_SEP}(${scp_key_})${TWX_TREE_RECORD_SEP}.^${TWX_TREE_GROUP_SEP}*(.*)$" )
twx_tree_remove ( TREE A/ KEYS key )
twx_expect_equal_string ( A/ "${TWX_TREE_HEADER}" )
endblock ()

message ( STATUS "Test twx_tree_set/2" )
block ()
list ( APPEND CMAKE_MESSAGE_CONTEXT set/2 )
twx_tree_init ( actual/ )
twx_tree_set ( TREE actual/ key/key=value )
twx_tree_init ( A/ )
twx_tree_set ( TREE A/ key=value )
twx_tree_init ( expected/ )
twx_tree_set ( TREE expected/ key=${A/} )
twx_expect_equal_string ( actual/ "${expected/}" )
endblock ()

message ( STATUS "Test twx_tree_set/3" )
block ()
list ( APPEND CMAKE_MESSAGE_CONTEXT set/2 )
twx_tree_init ( A/ )
twx_tree_set ( TREE A/ key=value )
twx_tree_set ( TREE A/ key=other_value )
twx_expect_equal_string ( A/ "${TWX_TREE_HEADER}${TWX_TREE_GROUP_SEP}key${TWX_TREE_RECORD_SEP}other_value" )
endblock ()

message ( STATUS "Test twx_tree_set/get/1" )
block ()
list ( APPEND CMAKE_MESSAGE_CONTEXT set/get/1 )
twx_tree_init ( A/ )
twx_tree_set ( TREE A/ key=value )
set ( A.key dummy )
twx_tree_get ( TREE A/ KEY key )
twx_expect_equal_string ( A.key "value" )
twx_assert_undefined ( TWX_IS_TREE_A.key )
endblock ()

message ( STATUS "Test twx_tree_set/get/2" )
block ()
list ( APPEND CMAKE_MESSAGE_CONTEXT set/get/2 )
twx_tree_init ( A/ )
twx_tree_set ( TREE A/ k/kk/kkk=value )
set ( A.k/kk/kkk dummy )
set ( TWX_IS_TREE_A.k/kk/kkk dummy )
twx_tree_get ( TREE A/ KEY k/kk/kkk )
twx_expect_equal_string ( A.k/kk/kkk "value" )
twx_assert_undefined ( TWX_IS_TREE_A.k/kk/kkk )
twx_tree_init ( expected/ )
twx_tree_set ( TREE expected/ kkk=value )
set ( A.k/kk/ dummy )
twx_tree_get ( TREE A/ IN_VAR A.k/kk/ KEY k/kk )
unset ( A.k/ )
twx_tree_get ( TREE A/ IN_VAR A.k/ KEY k )
twx_tree_init ( expected/ )
twx_tree_set ( TREE expected/ kk/kkk=value )
twx_expect_equal_string ( A.k/ "${expected/}" )
endblock ()

message ( STATUS "Test twx_tree_remove/1" )
block ()
list ( APPEND CMAKE_MESSAGE_CONTEXT set/2 )
twx_tree_init ( A/ )
twx_tree_remove ( TREE A/ KEYS what ever )
twx_tree_init ( B/ )
twx_expect_equal_string ( A/ "${B/}" )
endblock ()

message ( STATUS "Test twx_tree_remove/2" )
block ()
list ( APPEND CMAKE_MESSAGE_CONTEXT set/2 )
twx_tree_init ( A/ )
twx_tree_set ( TREE A/ key=value )
twx_tree_remove ( TREE A/ KEYS key what ever )
twx_tree_init ( B/ )
twx_expect_equal_string ( A/ "${B/}" )
endblock ()

message ( STATUS "Test twx_tree_remove/3" )
block ()
list ( APPEND CMAKE_MESSAGE_CONTEXT remove/3 )
twx_tree_init ( A/ )
twx_tree_set ( TREE A/ key/key/key=value )
twx_tree_remove ( TREE A/ KEYS what ever key )
twx_tree_init ( expected/ )
twx_message ( STATUS "${A/}" )
twx_tree_get ( TREE A/ IN_VAR A.key/ KEY key )
twx_tree_assert ( A.key/ )
twx_expect_equal_string ( A.key/ "${expected/}" )
endblock ()

message ( STATUS "Test twx_tree_remove/4" )
block ()
list ( APPEND CMAKE_MESSAGE_CONTEXT remove/4 )
twx_tree_init ( A/ )
twx_tree_set ( TREE A/ key/key/key=value )
twx_tree_remove ( TREE A/ KEYS key/key )
twx_tree_get ( TREE A/ IN_VAR A.key/key/ KEY key/key )
twx_tree_assert ( A.key/key/ )
twx_tree_get ( TREE A/ IN_VAR A.key/ KEY key )
twx_tree_assert ( A.key/ )
twx_tree_get ( TREE A.key/ IN_VAR A.key.key/ KEY key )
twx_tree_assert ( A.key.key/ )
twx_tree_init ( expected/ )
twx_expect_equal_string ( A.key.key/ ${expected/} )
endblock ()

message ( STATUS "Test twx_tree_..." )
block ()
list ( APPEND CMAKE_MESSAGE_CONTEXT ... )
twx_tree_init ( A/ )
twx_expect_equal_string ( A/ "${TWX_TREE_HEADER}" )
twx_tree_set ( TREE A/ k1/k1=v11 k1/k2=v12 k2/k1=v21 k2/k2=v22 k3=v3 k4=v4 )
twx_tree_log ( TREE A/ )
twx_tree_prettify ( TREE A/ IN_VAR pretty )
message ( STATUS "A/ => ${pretty}")
unset ( A.k1/ )
twx_tree_get ( TREE A/ IN_VAR A.k1/ KEY k1 )
twx_assert_defined ( A.k1/ )
twx_assert_true ( "${TWX_IS_TREE_A.k1/}" )
# TODO: twx_tree_assert -> twx_assert_tree
twx_tree_assert ( A.k1/ )
unset ( A.k1.k1/ )
twx_tree_get ( TREE A.k1/ IN_VAR A.k1.k1/ KEY k1 )
twx_expect_equal_string ( A.k1.k1/ v11 )
unset ( A.k1.k2/ )
twx_tree_get ( TREE A.k1/ IN_VAR A.k1.k2/ KEY k2 )
twx_expect_equal_string ( A.k1.k2/ v12 )
endblock ()

message ( STATUS "" )
block ()
list ( APPEND CMAKE_MESSAGE_CONTEXT test_ )
endblock ()



message ( STATUS "Trees inside trees" )
block ()
list ( APPEND CMAKE_MESSAGE_CONTEXT subtrees )
twx_tree_init ( A/ )
twx_tree_init ( AA/ )
twx_tree_init ( AAA/ )
twx_tree_set ( TREE AAA/ "kkk=vvv" )
twx_tree_set ( TREE AA/  "kk=${AAA/}" )
set ( AA.kk/ dummy )
twx_tree_get ( TREE AA/ IN_VAR AA.kk/ KEY kk )
twx_tree_assert ( AA.kk/ )
twx_expect_equal_string ( AA.kk/ "${AAA/}" )
set ( v dummy )
twx_tree_get ( TREE AA/ IN_VAR v KEY kk/kkk )
twx_expect_equal_string ( v "vvv" )
twx_tree_set ( TREE A/  "k=${AA/}" )
set ( v dummy )
twx_tree_get ( TREE A/ IN_VAR v KEY k )
twx_expect_equal_string ( v "${AA/}" )
set ( v dummy )
twx_tree_get ( TREE A/ IN_VAR v KEY k/kk )
twx_expect_equal_string ( v "${AAA/}" )
set ( v dummy )
twx_tree_get ( TREE A/ IN_VAR v KEY k/kk/kkk )
twx_expect_equal_string ( v "vvv" )
# Direct definition
twx_tree_init ( A/ )
twx_tree_set ( TREE A/ k/kk/kkk=vvv )
set ( v dummy )
twx_tree_get ( TREE A/ IN_VAR v KEY k )
twx_expect_equal_string ( v "${AA/}" )
set ( v dummy )
twx_tree_get ( TREE A/ IN_VAR v KEY k/kk )
twx_expect_equal_string ( v "${AAA/}" )
set ( v dummy )
twx_tree_get ( TREE A/ IN_VAR v KEY k/kk/kkk )
twx_expect_equal_string ( v "vvv" )
endblock()

message ( STATUS "Test Tree with default Tree" )
block ()
list ( APPEND CMAKE_MESSAGE_CONTEXT TWX_TREE )
message ( STATUS "Test twx_tree_init" )
block ()
list ( APPEND CMAKE_MESSAGE_CONTEXT init )
twx_tree_init ()
twx_tree_get ( IN_VAR v KEY k )
twx_assert_undefined ( v )
twx_tree_set ( k=v )
twx_tree_get ( IN_VAR v KEY k )
twx_expect_equal_string ( v v )
endblock()
message ( STATUS "Test twx_tree_get" )
block ()
list ( APPEND CMAKE_MESSAGE_CONTEXT get )
twx_tree_init ()
set ( v dummy )
twx_assert_defined ( v )
twx_tree_get ( IN_VAR v KEY k )
twx_assert_undefined ( v )
endblock()
message ( STATUS "Test twx_tree_set" )
block ()
list ( APPEND CMAKE_MESSAGE_CONTEXT set )
twx_tree_init ()
twx_tree_set ( k=v )
twx_tree_get ( IN_VAR v KEY k )
twx_expect_equal_string ( v v )
endblock()
message ( STATUS "Test twx_tree_remove" )
block ()
list ( APPEND CMAKE_MESSAGE_CONTEXT remove )
twx_tree_init ()
twx_tree_set ( k=v )
twx_tree_remove ( KEYS k )
set ( v dummy )
twx_assert_defined ( v )
twx_tree_get ( IN_VAR v KEY k )
twx_assert_undefined ( v )
endblock()

endblock ()

endblock ()

message ( STATUS "TwxTreeLib test...")

#*/
