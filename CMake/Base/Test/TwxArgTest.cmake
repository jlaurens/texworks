#[===============================================[/*
This is part of the TWX build and test system.
https://github.com/TeXworks/texworks
(C)  JL 2023
*/
/** @file
  * @brief TwxArgLib test suite.
  *
  *//*
#]===============================================]

if ( DEFINED //CMake/Include/Test/TwxArgTest.cmake )
  return ()
endif ()

set ( //CMake/Include/Test/TwxArgTest.cmake ON )

message ( STATUS "TwxArgLib test...")

include ( "${CMAKE_CURRENT_LIST_DIR}/../TwxArgLib.cmake")

include ( "${CMAKE_CURRENT_LIST_DIR}/TwxCoreTest.cmake")
include ( "${CMAKE_CURRENT_LIST_DIR}/TwxIncrementTest.cmake")

block ()

set ( CMAKE_MESSAGE_LOG_LEVEL TRACE )
list ( APPEND CMAKE_MESSAGE_CONTEXT Arg )
set ( CMAKE_MESSAGE_CONTEXT_SHOW ON )

message ( STATUS "twx_arg_assert_count" )
block ()
list ( APPEND CMAKE_MESSAGE_CONTEXT assert_count )
twx_test_fatal_assert_passed ()
if ( TRUE )
  function ( TwxArgTest_test1 op right )
    twx_arg_assert_count ( ${ARGC} ${op} ${right} )
  endfunction ()
  twx_test_fatal ()
  TwxArgTest_test1 ( < 3 )
  twx_test_fatal_assert_passed ()
  twx_test_fatal ()
  TwxArgTest_test1 ( < 1 )
  twx_test_fatal_assert_failed ()
  twx_test_fatal ()
  TwxArgTest_test1 ( <= 3 )
  twx_test_fatal_assert_passed ()
  twx_test_fatal ()
  TwxArgTest_test1 ( <= 1 )
  twx_test_fatal_assert_failed ()
  twx_test_fatal ()
  TwxArgTest_test1 ( <= 2 )
  twx_test_fatal_assert_passed ()
  twx_test_fatal ()
  TwxArgTest_test1 ( == 2 )
  twx_test_fatal_assert_passed ()
  twx_test_fatal ()
  TwxArgTest_test1 ( == 1 )
  twx_test_fatal_assert_failed ()
  twx_test_fatal ()
  TwxArgTest_test1 ( >= 2 )
  twx_test_fatal_assert_passed ()
  twx_test_fatal ()
  TwxArgTest_test1 ( >= 3 )
  twx_test_fatal_assert_failed ()
  twx_test_fatal ()
  TwxArgTest_test1 ( >= 1 )
  twx_test_fatal_assert_passed ()
  twx_test_fatal ()
  TwxArgTest_test1 ( > 1 )
  twx_test_fatal_assert_passed ()
  twx_test_fatal ()
  TwxArgTest_test1 ( > 3 )
  twx_test_fatal_assert_failed ()
  twx_test_fatal ()
endif ()
twx_test_fatal ()
endblock ()

message ( STATUS "twx_arg_pass_option(1)" )
block ()
list ( APPEND CMAKE_MESSAGE_CONTEXT pass_option_1 )
twx_test_fatal_assert_passed ()
if ( TRUE )
  twx_test_fatal_assert_passed ()
  set ( twxR_CHI ON )
  twx_arg_pass_option ( CHI )
  if ( NOT twxR_CHI STREQUAL "CHI" )
    message ( FATAL_ERROR "FAILED" )
  endif ()
  set ( twxR_CHI OFF )
  twx_arg_pass_option ( CHI )
  if ( DEFINED twxR_CHI )
    message ( FATAL_ERROR "FAILED" )
  endif ()
endif ()
twx_test_fatal ()
endblock ()

message ( STATUS "twx_arg_pass_option(2)" )
block ()
list ( APPEND CMAKE_MESSAGE_CONTEXT pass_option_2 )
twx_test_fatal_assert_passed ()
if ( TRUE )
  function ( TwxArgTest_pass_option_2 CHI FOO )
    set ( twxR_CHI ${CHI} )
    set ( twxR_FOO ${FOO} )
    twx_arg_pass_option ( CHI FOO )
    foreach ( what CHI FOO )
      if ( ${${what}} )
        if ( NOT twxR_${what} STREQUAL "${what}" )
          message ( FATAL_ERROR "FAILED" )
        endif ()
      else ()
        if ( DEFINED twxR_${what} )
          message ( FATAL_ERROR "FAILED" )
        endif ()
      endif ()
    endforeach ()
  endfunction ()
  TwxArgTest_pass_option_2 ( ON   ON  )
  TwxArgTest_pass_option_2 ( ON   OFF )
  TwxArgTest_pass_option_2 ( OFF  ON  )
  TwxArgTest_pass_option_2 ( OFF  OFF )
endif ()
twx_test_fatal ()
endblock ()

message ( STATUS "twx_arg_expect_keyword" )
block ()
list ( APPEND CMAKE_MESSAGE_CONTEXT expect_keyword )
twx_test_fatal_assert_passed ()
if ( TRUE )
  twx_test_fatal ()
  set ( actual EXPECTED )
  twx_arg_expect_keyword ( actual "EXPECTED" )
  twx_test_fatal_assert_passed ()
  twx_test_fatal ()
  set ( actual UNEXPECTED )
  twx_arg_expect_keyword ( actual "EXPECTED" )
  twx_test_fatal_assert_failed ()
  # twx_test_fatal ()
  # twx_arg_expect_keyword ( actual ) can't catch too few arguments
  # twx_test_fatal_assert_failed ()
  twx_test_fatal ()
  twx_arg_expect_keyword ( actual actual actual )
  twx_test_fatal_assert_failed ()
endif ()
twx_test_fatal ()
endblock ()

message ( STATUS "twx_arg_assert_keyword" )
block ()
list ( APPEND CMAKE_MESSAGE_CONTEXT assert_keyword )
twx_test_fatal ()
twx_test_fatal_assert_passed ()
if ( TRUE )
  set ( twxR_FOO_B. FOO )
  set ( twxR_FOO_BAR. FOO_BAR )
  twx_arg_assert_keyword ( twxR_FOO_B. twxR_FOO_BAR. )
  twx_test_fatal_assert_passed ()
  twx_test_fatal ()
  set ( twxR_FOO_B. FOOX )
  set ( twxR_FOO_BAR. FOO_BAR )
  twx_arg_assert_keyword ( twxR_FOO_B. twxR_FOO_BAR. )
  twx_test_fatal_assert_failed ()
  twx_test_fatal ()
  set ( twxR_FOO_B. FOO )
  set ( twxR_FOO_BAR. FOO_BARX )
  twx_arg_assert_keyword ( twxR_FOO_B. twxR_FOO_BAR. )
  twx_test_fatal_assert_failed ()

  twx_test_fatal ()
  set ( MY_FOO_B. FOOX )
  set ( MY_FOO_BAR. FOO_BAR )
  twx_arg_assert_keyword ( FOO_B. FOO_BAR. PREFIX MY)
  twx_test_fatal_assert_failed ()
  twx_test_fatal ()
  set ( MY_FOO_B. FOO )
  set ( MY_FOO_BAR. FOO_BARX )
  twx_arg_assert_keyword ( FOO_B. FOO_BAR. PREFIX MY)
  twx_test_fatal_assert_failed ()
endif ()
twx_test_fatal ()
endblock ()

message ( STATUS "twx_arg_assert_parsed" )
block ()
list ( APPEND CMAKE_MESSAGE_CONTEXT assert_parsed )
twx_test_fatal_assert_passed ()
if ( TRUE )
  function ( TwxArgLib_assert_parsed_1 )
    cmake_parse_arguments ( twxR "" "KEY" "" ${ARGN} )
    twx_arg_assert_parsed ()
  endfunction()
  twx_test_fatal ()
  TwxArgLib_assert_parsed_1 ( )
  twx_test_fatal_assert_passed ()
  twx_test_fatal ()
  TwxArgLib_assert_parsed_1 ( KEY key )
  twx_test_fatal_assert_passed ()
  twx_test_fatal ()
  TwxArgLib_assert_parsed_1 ( youpi )
  twx_test_fatal_assert_failed ()
endif ()
twx_test_fatal ()
endblock ()

endblock ()

message ( STATUS "TwxArgLib test... DONE")

#*/
