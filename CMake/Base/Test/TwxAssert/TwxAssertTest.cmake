#[===============================================[/*
This is part of the TWX build and test system.
https://github.com/TeXworks/texworks
(C)  JL 2023
*/
/** @file
  * @brief TwxAssertLib test suite.
  *
  * First test.
  *//*
#]===============================================]

include_guard ( GLOBAL )

twx_test_suite_will_begin ()
block ()

message ( STATUS "twx_assert_undefined" )
block ()
list ( APPEND CMAKE_MESSAGE_CONTEXT undefined )
twx_fatal_assert_passed ()
if ( TRUE )
  twx_fatal_test ()
  unset ( dummy )
  twx_assert_undefined ( dummy )
  twx_fatal_catched ( IN_VAR v )
  twx_fatal_assert_passed ()
  twx_fatal_test ()
  set ( dummy "" )
  twx_assert_undefined ( dummy )
  twx_fatal_assert_failed ()
endif ()
twx_fatal_test ()
endblock ()

message ( STATUS "twx_assert_defined" )
block ()
list ( APPEND CMAKE_MESSAGE_CONTEXT defined )
 twx_fatal_assert_passed ()
if ( TRUE )
  twx_fatal_test ()
  set ( dummy "" )
  twx_assert_defined ( dummy )
  twx_fatal_catched ( IN_VAR v )
  twx_fatal_assert_passed ()
  twx_fatal_test ()
  unset ( dummy )
  twx_assert_defined ( dummy )
  twx_fatal_assert_failed ()
endif ()
twx_fatal_test ()
endblock ()

message ( STATUS "twx_assert_compare(yes)" )
block ()
list ( APPEND CMAKE_MESSAGE_CONTEXT compare_yes )
twx_fatal_assert_passed ()
if ( TRUE )
  twx_fatal_test ()
  twx_assert_compare ( 1 < 2 )
  twx_fatal_assert_passed ()
  twx_fatal_test ()
  twx_assert_compare ( 1 <= 2 )
  twx_fatal_assert_passed ()
  twx_fatal_test ()
  twx_assert_compare ( 2 <= 2 )
  twx_fatal_assert_passed ()
  twx_fatal_test ()
  twx_assert_compare ( 2 == 2 )
  twx_fatal_assert_passed ()
  twx_fatal_test ()
  twx_assert_compare ( 2 = 2 )
  twx_fatal_assert_passed ()
  twx_fatal_test ()
  twx_assert_compare ( 2 >= 2 )
  twx_fatal_assert_passed ()
  twx_fatal_test ()
  twx_assert_compare ( 3 >= 2 )
  twx_fatal_assert_passed ()
  twx_fatal_test ()
  twx_assert_compare ( 3 > 2 )
  twx_fatal_assert_passed ()
  twx_fatal_test ()
  twx_assert_compare ( 3 <> 2 )
  twx_fatal_assert_passed ()
  twx_fatal_test ()
  twx_assert_compare ( 3 != 2 )
  twx_fatal_assert_passed ()
endif ()
twx_fatal_test ()
endblock ()

message ( STATUS "twx_assert_compare(no)" )
block ()
list ( APPEND CMAKE_MESSAGE_CONTEXT compare_no )
twx_fatal_assert_passed ()
if ( TRUE )
  twx_fatal_test ()
  twx_assert_compare ( 3 < 2 )
  twx_fatal_assert_failed ()
  twx_fatal_test ()
  twx_assert_compare ( 3 <= 2 )
  twx_fatal_assert_failed ()
  twx_fatal_test ()
  twx_assert_compare ( 3 == 2 )
  twx_fatal_assert_failed ()
  twx_fatal_test ()
  twx_assert_compare ( 3 = 2 )
  twx_fatal_assert_failed ()
  twx_fatal_test ()
  twx_assert_compare ( 2 >= 3 )
  twx_fatal_assert_failed ()
  twx_fatal_test ()
  twx_assert_compare ( 2 > 3 )
  twx_fatal_assert_failed ()
endif ()
twx_fatal_test ()
endblock ()

message ( STATUS "twx_assert_compare(pipe/yes)" )
block ()
list ( APPEND CMAKE_MESSAGE_CONTEXT compare_pipe_yes )
twx_fatal_assert_passed ()
if ( TRUE )
  twx_fatal_test ()
  twx_assert_compare ( 1 < 2 < 3 )
  twx_fatal_catched ( IN_VAR v )
  twx_fatal_assert_passed ()
  twx_fatal_test ()
  twx_assert_compare ( 1 < 2 > 1 )
  twx_fatal_catched ( IN_VAR v )
  twx_fatal_assert_passed ()
endif ()
twx_fatal_test ()
endblock ()

message ( STATUS "twx_assert_compare(pipe/no)" )
block ()
list ( APPEND CMAKE_MESSAGE_CONTEXT compare_pipe_no )
twx_fatal_assert_passed ()
if ( TRUE )
  twx_fatal_test ()
  twx_assert_compare ( 3 < 2 < 3 )
  twx_fatal_assert_failed ()
  twx_fatal_test ()
  twx_assert_compare ( 1 < 2 < 1 )
  twx_fatal_assert_failed ()
endif ()
twx_fatal_test ()
endblock ()

message ( STATUS "twx_assert_non_void" )
block ()
list ( APPEND CMAKE_MESSAGE_CONTEXT non_void )
twx_fatal_assert_passed ()
if ( TRUE )
  twx_fatal_test ()
  set ( foo bar )
  twx_assert_non_void ( foo )
  twx_fatal_catched ( IN_VAR v )
  twx_fatal_assert_passed ()
  twx_fatal_test ()
  set ( foo bar )
  set ( bar baz )
  twx_assert_non_void ( foo bar )
  twx_fatal_catched ( IN_VAR v )
  twx_fatal_assert_passed ()
  twx_fatal_test ()
  unset ( foo )
  unset ( bar )
  twx_assert_non_void ( foo )
  twx_fatal_catched ( IN_VAR v )
  if ( v STREQUAL "" )
    message ( STATUS FATAL_ERROR "FAILURE" )
  endif ()
  twx_fatal_test ()
  set ( foo )
  twx_assert_non_void ( foo )
  twx_fatal_assert_failed ()
  twx_fatal_test ()
  unset ( foo )
  set ( bar baz )
  twx_assert_non_void ( foo bar )
  twx_fatal_assert_failed ()
  twx_fatal_test ()
  unset ( foo )
  set ( bar baz )
  twx_assert_non_void ( bar foo )
  twx_fatal_assert_failed ()
endif ()
twx_fatal_test ()
endblock ()

message ( STATUS "twx_assert_0" )
block ()
list ( APPEND CMAKE_MESSAGE_CONTEXT 0 )
twx_fatal_assert_passed ()
if ( TRUE )
  twx_fatal_test ()
  set ( foo )
  twx_assert_0 ( "${foo}" )
  twx_fatal_assert_failed ()
  twx_fatal_test ()
  set ( foo )
  set ( bar 0 )
  twx_assert_0 ( "${foo}" "${bar}" )
  twx_fatal_assert_failed ()
  twx_fatal_test ()
  set ( foo )
  set ( bar 0 )
  twx_assert_0 ( "${bar}" "${foo}" )
  twx_fatal_assert_failed ()
  twx_fatal_test ()
  set ( foo "0" )
  twx_assert_0 ( "${foo}" )
  twx_fatal_catched ( IN_VAR v )
  twx_fatal_assert_passed ()
  twx_fatal_test ()
  set ( foo "wizz" )
  twx_assert_0 ( "${foo}" )
  twx_fatal_assert_failed ()
endif ()
twx_fatal_test ()
endblock ()

message ( STATUS "twx_assert_true/twx_assert_false" )
block ()
list ( APPEND CMAKE_MESSAGE_CONTEXT true_false )
twx_fatal_assert_passed ()
if ( TRUE )
  set ( foo ON )
  twx_fatal_test ()
  twx_assert_true ( "foo" )
  twx_fatal_assert_passed ()
  twx_fatal_test ()
  twx_assert_true ( "${foo}" )
  twx_fatal_assert_passed ()
  twx_fatal_test ()
  twx_assert_false ( "foo" )
  twx_fatal_assert_failed ()
  twx_fatal_test ()
  twx_assert_false ( "${foo}" )
  twx_fatal_assert_failed ()

  set ( foo OFF )
  twx_fatal_test ()
  twx_assert_false ( "foo" )
  twx_fatal_assert_passed ()
  twx_fatal_test ()
  twx_assert_false ( "${foo}" )
  twx_fatal_assert_passed ()
  twx_fatal_test ()
  twx_assert_true ( "foo" )
  twx_fatal_assert_failed ()
  twx_fatal_test ()
  twx_assert_true ( "${foo}" )
  twx_fatal_assert_failed ()

  set ( foo ON )
  set ( bar ON )
  twx_assert_true ( "foo" "bar" "${foo}" "${bar}" )
  
  set ( foo )
  twx_assert_false ( foo "foo" )

  twx_assert_true ( "" )

  if ( "" )
    message ( STATUS "VOID IS TRUE" )
  endif ()
  
  if ( NOT "" )
    message ( STATUS "VOID IS FALSE" )
  endif ()
  
  if ( NOT ( NOT "" ) )
    message ( STATUS "VOID IS TRUE" )
  endif ()

  set ( foo )
  if ( foo )
    message ( STATUS "UNDEFINED IS TRUE" )
  endif ()
  if ( NOT foo )
    message ( STATUS "UNDEFINED IS FALSE" )
  endif ()
  twx_assert_false ( foo )

  twx_fatal_test ()
  set ( foo "ON" )
  twx_assert_true ( "${foo}" )
  twx_fatal_assert_passed ()

  twx_fatal_test ()
  unset ( wizz )
  set ( foo "wizz" )
  twx_assert_false ( "wizz" )
  twx_fatal_assert_passed ()
  twx_assert_true ( "foo" )
  twx_fatal_assert_passed ()
  
  twx_fatal_test ()
  set ( foo N )
  twx_assert_false ( foo )
  twx_fatal_assert_passed ()
  twx_fatal_test ()
  set ( foo N )
  twx_assert_true ( foo )
  twx_fatal_assert_failed ()
endif ()
twx_fatal_test ()
endblock ()

message ( STATUS "twx_assert_exists" )
block ()
list ( APPEND CMAKE_MESSAGE_CONTEXT exists )
twx_fatal_assert_passed ()
if ( TRUE )
  twx_fatal_test ()
  twx_assert_exists ( "${CMAKE_CURRENT_LIST_DIR}/" )
  twx_fatal_assert_passed ()
  twx_fatal_test ()
  twx_assert_exists ( "${CMAKE_CURRENT_LIST_DIR}/NO_FILE_AT_THIS_PATH" )
  twx_fatal_assert_failed ()
endif ()
twx_fatal_test ()
endblock ()

message ( STATUS "twx_assert_target" )
block ()
list ( APPEND CMAKE_MESSAGE_CONTEXT target )
set ( TWX_FATAL_CATCH ON )
twx_fatal_test ()
if ( NOT TARGET TwxAssertTest.cmakeDummyTarget )
  twx_assert_target ( "TwxAssertTest.cmakeDummyTarget" )
  twx_fatal_catched ( IN_VAR v )
  if ( v STREQUAL "" )
    message ( FATAL_ERROR "FAILURE" )
  endif ()
  add_custom_target ( "TwxAssertTest.cmakeDummyTarget" )
  twx_fatal_test ()
  twx_assert_target ( "TwxAssertTest.cmakeDummyTarget" )
  twx_fatal_assert_passed ()
endif ()
twx_fatal_test ()
endblock ()

endblock ()
twx_test_suite_did_end ()

#*/
