#[===============================================[/*
This is part of the TWX build and test system.
https://github.com/TeXworks/texworks
(C)  JL 2023
*/
/** @file
  * @brief TwxTreeLib test suite.
  *
  *//*
#]===============================================]

include_guard ( GLOBAL )

twx_test_suite_push ()
block ()

twx_tree_assert ( TREE /TWX/TREE/DEFAULT )
twx_assert_true ( "${/TWX/IS_TREE//TWX/TREE/DEFAULT}" )

# ANCHOR: prettify
twx_test_unit_push ( CORE "prettify" )
if ( /TWX/TEST/UNIT.RUN )
  block ()
  unset ( m )
  twx_test_simple_check ( "<SOH><STX><GS/><RS/>" )
  twx_tree_prettify ( MSG "${/TWX/TREE/MARK}${/TWX/TREE/START}${/TWX/TREE/RECORD}${/TWX/TREE/SEP}" IN_VAR m )
  twx_expect ( m "<SOH><STX><GS/><RS/>" )
  twx_test_simple_pass ()
  twx_test_simple_check ( "<SOH>/TWX/TREE<STX>" )
  twx_tree_prettify ( MSG "${/TWX/TREE/HEADER}" IN_VAR m )
  twx_expect ( m "<SOH>/TWX/TREE<STX>" )
  twx_test_simple_pass ()
  endblock ()
endif ()
twx_test_unit_pop ()

# ANCHOR: /TWX/TREE/KEY_RE
twx_test_unit_push ( NAME "/TWX/TREE/KEY_RE" CORE KEY_RE )
if ( /TWX/TEST/UNIT.RUN )
  block ()
  twx_fatal_test ()
  # set (
  #   /TWX/TREE/KEY_RE
  #   "([a-zA-Z/_.+-]|\\[^a-zA-Z;]|\\[trn]|\\;)([a-zA-Z0-9_.+-]|\\[^a-zA-Z0-9;]|\\[trn]|\\;)*"
  # )
  twx_test_simple_check ( a )
  twx_expect_matches ( a "${/TWX/TREE/KEY_RE}" )
  twx_test_simple_pass ()
  twx_test_simple_check ( abc )
  twx_expect_matches ( abc "${/TWX/TREE/KEY_RE}" )
  twx_test_simple_pass ()
  twx_test_simple_check ( 0abc )
  twx_expect_unmatches ( 0abc "^${/TWX/TREE/KEY_RE}$" )
  twx_test_simple_pass ()
  twx_test_simple_check ( / )
  twx_expect_unmatches ( / "^${/TWX/TREE/KEY_RE}$" )
  twx_test_simple_pass ()
  endblock ()
endif ()
twx_test_unit_pop ()

# ANCHOR: assert_key
twx_test_unit_push ( CORE assert_key )
if ( /TWX/TEST/UNIT.RUN )
  block ()
  twx_test_simple_check ( a )  
  twx_tree_assert_key ( a )
  twx_test_simple_pass ()
  
  twx_test_simple_check ( / )  
  twx_tree_assert_key ( / )
  twx_test_simple_fail ()

  twx_test_simple_check ( a/ )  
  twx_tree_assert_key ( a/ )
  twx_test_simple_fail ()

  endblock ()
endif ()
twx_test_unit_pop ()

# ANCHOR: init
twx_test_unit_push ( CORE init )
if ( /TWX/TEST/UNIT.RUN )
  block ()

  twx_test_simple_check ( "Undefined /A" )
  set ( /A )
  twx_tree_assert ( TREE /A )
  twx_test_simple_fail ()

  twx_test_simple_check ( "Inited /A" )
  set ( /A )
  twx_tree_init ( TREE TREE /A )
  twx_tree_assert ( TREE /A )
  twx_assert_true ( "${/TWX/IS_TREE//A}" )
  twx_expect ( /A "${/TWX/TREE/HEADER}" )
  twx_test_simple_pass ()

  twx_test_simple_check ( "/A => ``dummy''" )
  set ( /A dummy )
  twx_tree_init ( TREE TREE /A )
  twx_tree_assert ( TREE /A )
  twx_assert_true ( "${/TWX/IS_TREE//A}" )
  twx_expect ( /A "${/TWX/TREE/HEADER}" )
  twx_test_simple_pass ()

  twx_test_simple_check ( "Undefined DEFAULT explicit" )
  set ( /TWX/TREE/DEFAULT )
  twx_tree_assert ( TREE /TWX/TREE/DEFAULT )
  twx_test_simple_fail ()

  twx_test_simple_check ( "Undefined DEFAULT implicit" )
  set ( /TWX/TREE/DEFAULT )
  twx_tree_assert ()
  twx_test_simple_fail ()

  twx_test_simple_check ( "Defined DEFAULT" )
  set ( /TWX/TREE/DEFAULT )
  twx_tree_init ()
  twx_tree_assert ()
  twx_tree_assert ( TREE /TWX/TREE/DEFAULT )
  twx_test_simple_pass ()

  endblock ()
endif ()
twx_test_unit_pop ()

# ANCHOR: get_keys
twx_test_unit_push ( CORE get_keys )
if ( /TWX/TEST/UNIT.RUN )
  block ()
  set ( /A "${/TWX/TREE/HEADER}\
${/TWX/TREE/RECORD}a1${/TWX/TREE/SEP}\
${/TWX/TREE/RECORD}a2${/TWX/TREE/SEP}\
${/TWX/TREE/RECORD}b1${/TWX/TREE/SEP}\
${/TWX/TREE/RECORD}b2${/TWX/TREE/SEP}\
" )
  twx_test_simple_check ( "a1;a2;b1;b2" )
  set ( keys )
  twx_tree_get_keys ( TREE /A IN_VAR keys )
  twx_expect_list ( keys "a1" "a2" "b1" "b2" )
  twx_test_simple_pass ()

  twx_test_simple_check ( "PREFIX a" )
  set ( keys )
  twx_tree_get_keys ( TREE /A IN_VAR keys PREFIX a )
  twx_expect_list ( keys "a1" "a2" )
  twx_test_simple_pass ()

  twx_test_simple_check ( "PREFIX a RELATIVE" )
  set ( keys )
  twx_tree_get_keys ( TREE /A IN_VAR keys PREFIX a RELATIVE )
  twx_expect_list ( keys "1" "2" )
  twx_test_simple_pass ()

  twx_test_simple_check ( "PREFIX b" )
  set ( keys )
  twx_tree_get_keys ( TREE /A IN_VAR keys PREFIX b )
  twx_expect_list ( keys "b1" "b2" )
  twx_test_simple_pass ()

  twx_test_simple_check ( "PREFIX b RELATIVE" )
  set ( keys )
  twx_tree_get_keys ( TREE /A IN_VAR keys PREFIX b RELATIVE )
  twx_expect_list ( keys "1" "2" )
  twx_test_simple_pass ()

  twx_test_simple_check ( "MATCHES 1$" )
  set ( keys )
  twx_tree_get_keys ( TREE /A IN_VAR keys MATCHES 1$ )
  twx_expect_list ( keys "a1" "b1" )
  twx_test_simple_pass ()

  twx_test_simple_check ( "MATCHES 2$" )
  set ( keys )
  twx_tree_get_keys ( TREE /A IN_VAR keys MATCHES 2$ )
  twx_expect_list ( keys "a2" "b2" )
  twx_test_simple_pass ()

  twx_test_simple_check ( "PREFIX a MATCHES 1$" )
  set ( keys )
  twx_tree_get_keys ( TREE /A IN_VAR keys PREFIX a MATCHES 1$ )
  twx_expect_list ( keys "a1" )
  twx_test_simple_pass ()

  twx_test_simple_check ( "PREFIX b MATCHES 2$" )
  set ( keys )
  twx_tree_get_keys ( TREE /A IN_VAR keys PREFIX b MATCHES 2$ )
  twx_expect_list ( keys "b2" )
  twx_test_simple_pass ()

  twx_test_simple_check ( "PREFIX a MATCHES 1$" )
  set ( keys )
  twx_tree_get_keys ( TREE /A IN_VAR keys PREFIX a MATCHES 1$ RELATIVE )
  twx_expect_list ( keys "1" )
  twx_test_simple_pass ()

  twx_test_simple_check ( "PREFIX b MATCHES 2$" )
  set ( keys )
  twx_tree_get_keys ( TREE /A IN_VAR keys PREFIX b MATCHES 2$ RELATIVE )
  twx_expect_list ( keys "2" )
  twx_test_simple_pass ()

  endblock ()
endif ()
twx_test_unit_pop ()

# ANCHOR: get
twx_test_unit_push ( CORE get )
if ( /TWX/TEST/UNIT.RUN )
  block ()

  twx_test_simple_check ( "Empty /A" )
  twx_tree_init ( TREE TREE /A )
  twx_tree_assert ( TREE /A )
  set ( v dummy )
  twx_assert_defined ( v )
  twx_tree_get ( TREE /A IN_VAR v KEY k )
  twx_assert_undefined ( v )
  twx_test_simple_pass ()

  twx_test_simple_check ( "Empty DEFAULT" )
  twx_tree_init ()
  twx_tree_assert ()
  set ( v dummy )
  twx_assert_defined ( v )
  twx_tree_get ( TREE /TWX/TREE/DEFAULT IN_VAR v KEY k )
  twx_assert_undefined ( v )
  set ( v dummy )
  twx_assert_defined ( v )
  twx_tree_get ( IN_VAR v KEY k )
  twx_assert_undefined ( v )
  twx_test_simple_pass ()

  twx_test_simple_check ( "Empty /A" )
  set ( v dummy )
  twx_assert_defined ( v )
  twx_tree_get ( IN_VAR v KEY k )
  twx_assert_undefined ( v )
  twx_test_simple_pass ()

  message ( FATAL_ERROR "*****" )

  twx_test_simple_check ( 1 )
  twx_tree_assert ( TREE /A )
  twx_fatal_assert_fail ()
  twx_tree_get ( TREE /A KEY key )  
  twx_fatal_assert_fail ()
  twx_test_simple_pass ()

  twx_tree_init ( TREE /A )

  twx_test_simple_check ( STREE )
  twx_tree_get ( STREE /A KEY key )  
  twx_fatal_assert_fail ()
  twx_test_simple_pass ()

  twx_test_simple_check ( XKEY )
  twx_tree_get ( TREE /A XKEY key )  
  twx_fatal_assert_fail ()
  twx_test_simple_pass ()

  twx_test_simple_check ( "k e y" )
  twx_tree_get ( TREE /A KEY "k e y" )  
  twx_fatal_assert_fail ()
  twx_test_simple_pass ()

  unset ( /A )
  twx_tree_init ( TREE /A )

  twx_test_simple_check ( A.whatever )
  set ( A.whatever dummy )
  set ( /TWX/IS_TREE/A.whatever dummy )
  twx_tree_get ( TREE /A IN_VAR A.whatever KEY whatever )
  twx_assert_undefined ( A.whatever )
  twx_assert_undefined ( /TWX/IS_TREE/A.whatever )
  twx_test_simple_pass ()

  twx_test_simple_check ( A.whatever )
  set ( A.whenever dummy )
  set ( /TWX/IS_TREE/A/whenever dummy )
  twx_tree_get ( TREE /A KEY whenever )
  twx_assert_undefined ( /A/whenever )
  twx_assert_undefined ( /TWX/IS_TREE/A.whenever )
  twx_test_simple_pass ()

  endblock ()
endif ()
twx_test_unit_pop ()

# ANCHOR: set
twx_test_unit_push ( CORE set )
if ( /TWX/TEST/UNIT.RUN )
  block ()

  twx_test_simple_check ( key=value )
  twx_tree_init ()
  twx_tree_set ( key=value )
  twx_tree_get ( IN_VAR v KEY key )
  twx_expect ( v value )
  twx_test_simple_pass ()

  twx_test_simple_check ( k=tree )
  unset ( /A )
  twx_tree_init ( TREE /A )
  twx_tree_assert ( TREE /A )
  twx_tree_set ( TREE /A key=${A/} )
  twx_expect ( /A "${/TWX/TREE/HEADER}${/TWX/TREE/RECORD}key/${/TWX/TREE/SEP}" )
  twx_test_simple_pass ()
  endblock ()
endif ()
twx_test_unit_pop ()

# ANCHOR: set/remove
twx_test_unit_push ( CORE set/remove )
if ( /TWX/TEST/UNIT.RUN )
  block ()
  twx_tree_init ( TREE /A )
  
  twx_test_simple_check ( key=value )
  twx_tree_set ( TREE /A key=value )
  twx_regex_escape ( "key" IN_VAR scp_key_ )
  twx_expect ( scp_key_ "key" )
  twx_expect_matches ( "${A/}" "${/TWX/TREE/RECORD}${scp_key_}${/TWX/TREE/SEP}" )
  twx_expect_matches ( "${A/}" "${/TWX/TREE/RECORD}(${scp_key_})${/TWX/TREE/SEP}([^${/TWX/TREE/RECORD}]*)" )
  twx_test_simple_pass ()
  
  twx_test_simple_check ( Remove )
  twx_tree_remove ( TREE /A KEY key )
  twx_expect ( /A "${/TWX/TREE/HEADER}" )
  twx_test_simple_pass ()
  
  endblock ()
endif ()
twx_test_unit_pop ()

# ANCHOR: set/1
twx_test_unit_push ( CORE set/1 )
if ( /TWX/TEST/UNIT.RUN )
  block ()
  twx_test_simple_check ( key/key=value )
  twx_tree_init ( TREE expected/ )
  twx_tree_set ( TREE expected/ key/key=value )
  twx_tree_init ( TREE /A )
  twx_tree_set ( TREE /A key=value )
  twx_tree_init ( TREE actual/ )
  twx_tree_set ( TREE actual/ key=${A/} )
  # twx_tree_prettify ( MSG "${expected/}" IN_VAR pretty )
  # message ( TR@CE "expected/ => ``${pretty}''" )
  # twx_tree_prettify ( MSG "${actual/}" IN_VAR pretty )
  # message ( TR@CE "actual/ => ``${pretty}''" )
  twx_expect ( actual/ "${expected/}" )
  twx_test_simple_pass ()

  twx_test_simple_check ( key=other_value )
  twx_tree_init ( TREE /A )
  twx_tree_set ( TREE /A key=value )
  twx_tree_set ( TREE /A key=other_value )
  twx_expect ( /A "${/TWX/TREE/HEADER}${/TWX/TREE/RECORD}key${/TWX/TREE/SEP}other_value" )
  twx_test_simple_pass ()
  endblock ()
endif ()
twx_test_unit_pop ()

# ANCHOR: set/get
twx_test_unit_push ( CORE set/get )
if ( /TWX/TEST/UNIT.RUN )
  block ()
  twx_tree_init ( TREE /A )
  twx_test_simple_check ( "key=value" )
  twx_tree_set ( TREE /A key=value )
  set ( A.key dummy )
  twx_tree_get ( TREE /A KEY key )
  twx_expect ( /A/key "value" )
  twx_assert_undefined ( /TWX/IS_TREE/A.key )
  twx_test_simple_pass ()

  twx_test_simple_check ( key=value...dummy )
  twx_tree_init ( TREE /A )
  twx_tree_set ( TREE /A key=value )
  set ( /A/key/ dummy )
  twx_tree_get ( TREE /A KEY key )
  twx_expect ( /A/key "value" )
  twx_test_simple_pass ()

  twx_test_simple_check ( k/kk/kkk=value )
  twx_tree_init ( TREE /A )
  twx_tree_set ( TREE /A k/kk/kkk=value )
  set ( A.k/kk/kkk dummy )
  set ( /TWX/IS_TREE/A.k/kk/kkk dummy )
  twx_tree_get ( TREE /A KEY k/kk/kkk )
  twx_expect ( /A/k/kk/kkk "value" )
  twx_assert_undefined ( /TWX/IS_TREE/A/k/kk/kkk )
  twx_tree_init ( TREE expected/ )
  twx_tree_set ( TREE expected/ kkk=value )
  set ( A.k/kk/ dummy )
  twx_tree_get ( TREE /A IN_VAR A.k/kk/ KEY k/kk )
  unset ( A.k/ )
  twx_tree_get ( TREE /A IN_VAR A.k/ KEY k )
  twx_tree_init ( TREE expected/ )
  twx_tree_set ( TREE expected/ kk/kkk=value )
  twx_expect ( A.k/ "${expected/}" )
  twx_test_simple_pass ()
  
  twx_test_simple_check ( "k/kk/kkk=value...dummy" )
  twx_tree_init ( TREE /A )
  twx_tree_set ( TREE /A k/kk/kkk=value )
  set ( A.k/kk/kkk dummy )
  set ( /TWX/IS_TREE/A.k/kk/kkk dummy )
  twx_tree_get ( TREE /A KEY k/kk/kkk )
  twx_expect ( /A/k/kk/kkk "value" )
  twx_assert_undefined ( /TWX/IS_TREE/A/k/kk/kkk )
  twx_test_simple_pass ()

  twx_test_simple_check ( "A/k/kk" )
  twx_tree_get ( TREE /A KEY k/kk )
  twx_tree_assert ( TREE /A/k/kk )
  twx_assert_true ( /TWX/IS_TREE/A/k/kk )
  twx_test_simple_pass ()

  twx_test_simple_check ( "kkk=value" )
  twx_tree_init ( TREE B/ )
  twx_tree_set ( TREE B/ kkk=value )
  twx_expect ( /A/k/kk "${B/}" )
  twx_test_simple_pass ()
  endblock ()
endif ()
twx_test_unit_pop ()

# ANCHOR: get_keys/1
twx_test_unit_push ( CORE get_keys/1 )
if ( /TWX/TEST/UNIT.RUN )
  block ()
  twx_tree_init ( TREE /A )
  twx_test_simple_check ( "key1=value1" )
  twx_tree_set ( TREE /A key1=value1 )
  twx_tree_get_keys ( TREE /A IN_VAR keys )
  twx_expect_list ( keys "key1" )
  twx_tree_set ( TREE /A key2=value2 )
  twx_tree_get_keys ( TREE /A IN_VAR keys )
  twx_expect_list ( keys "key1" "key2" )
  twx_test_simple_pass ()
  endblock ()
endif ()
twx_test_unit_pop ()

# ANCHOR: remove
twx_test_unit_push ( CORE "remove" )
if ( /TWX/TEST/UNIT.RUN )
  block ()
  # Remove unexisting key
  twx_test_simple_check ( "what ever" )
  twx_tree_init ( TREE /A )
  twx_tree_remove ( TREE /A KEY what ever )
  twx_tree_init ( TREE B/ )
  twx_expect ( /A "${B/}" )
  twx_test_simple_pass ()
  # Remove value
  twx_test_simple_check ( "key what ever" )
  twx_tree_init ( TREE /A )
  twx_tree_set ( TREE /A key=value )
  twx_tree_remove ( TREE /A KEY key what ever )
  twx_tree_init ( TREE B/ )
  twx_expect ( /A "${B/}" )
  twx_test_simple_pass ()
  # Remove whole subtree
  twx_test_simple_check ( "key/key/key=value" )
  twx_tree_init ( TREE /A )
  twx_tree_set ( TREE /A key/key/key=value )
  twx_tree_remove ( TREE /A KEY what ever key )
  twx_tree_init ( TREE expected/ )
  twx_message_log ( STATUS "${A/}" )
  twx_test_simple_pass ()

  twx_test_simple_check ( "key/key/key=value" )
  twx_tree_get ( TREE /A IN_VAR A.key KEY key )
  twx_test_simple_pass ()

  twx_test_simple_check ( "key/key/key=value" )
  twx_assert_undefined ( A.key )
  twx_test_simple_pass ()

  twx_test_simple_check ( "key/key/key=value" )
  twx_test_simple_pass ()
  # Remove subtree but remember(?)
  twx_test_simple_check ( "key/key/key=value" )
  twx_tree_init ( TREE /A )
  twx_tree_set ( TREE /A key/key/key=value )
  twx_tree_remove ( TREE /A KEY what ever key )
  twx_tree_get ( TREE /A IN_VAR A.key KEY key )
  twx_assert_undefined ( /A/key )
  twx_test_simple_pass ()

  twx_test_simple_check ( "key/key/key=value...dummy" )
  twx_tree_init ( TREE /A )
  twx_tree_set ( TREE /A key/key/key=value )
  set ( /A/key "dummy" )
  twx_tree_get ( TREE /A IN_VAR /A/key KEY key )
  twx_tree_init ( TREE B/ )
  twx_tree_set ( TREE B/ key/key=value )
  twx_expect ( /A/key "${B/}" )
  twx_test_simple_pass ()

  twx_test_simple_check ( "what ever key...dummy" )
  twx_tree_remove ( TREE /A KEY what ever key )
  set ( /A/key "dummy" )
  twx_tree_get ( TREE /A IN_VAR /A/key KEY key )
  twx_assert_undefined ( /A/key )
  twx_test_simple_pass ()

  twx_test_simple_check ( "key/key/key=value - key/key" )
  twx_tree_init ( TREE /A )
  twx_tree_set ( TREE /A key/key/key=value )
  twx_tree_remove ( TREE /A KEY key/key )
  twx_tree_get ( TREE /A IN_VAR A.key/key KEY key/key )
  twx_assert_undefined ( A.key/key )
  twx_tree_get ( TREE /A IN_VAR A.key/ KEY key )
  twx_tree_assert ( TREE A.key/ )
  twx_tree_get ( TREE A.key/ IN_VAR A.key.key KEY key )
  twx_assert_undefined ( A.key.key/ )
  twx_test_simple_pass ()

  twx_test_simple_check ( "key/key/key=value - /A/key" )
  twx_tree_init ( TREE /A )
  twx_tree_set ( TREE /A key/key/key=value )
  twx_tree_get ( TREE /A IN_VAR /A/key KEY key )
  twx_tree_assert ( TREE /A/key )
  twx_tree_get ( TREE /A/key IN_VAR /A/key/key KEY key )
  twx_tree_assert ( TREE /A/key/key )
  # twx_tree_prettify ( MSG "${A/key/key}" IN_VAR pretty )
  # message ( TR@CE "AFTER REMOVE:  /A/key/key => ${pretty}")
  twx_tree_init ( TREE expected/ )
  twx_tree_set ( TREE expected/ key=value )
  twx_expect ( /A/key/key "${expected/}" )
  twx_test_simple_pass ()

  twx_test_simple_check ( "k=v - k" )
  twx_tree_init ()
  twx_tree_set ( k=v )
  twx_tree_remove ( KEY k )
  set ( v dummy )
  twx_assert_defined ( v )
  twx_tree_get ( IN_VAR v KEY k )
  twx_assert_undefined ( v )
  twx_test_simple_pass ()

  twx_test_simple_check ( "k=v k2=v2 - k k2" )
  twx_tree_init ()
  twx_tree_set ( k=v k2=v2 )
  twx_tree_remove ( KEY k k2 )
  set ( v dummy )
  twx_assert_defined ( v )
  twx_tree_get ( IN_VAR v KEY k )
  twx_assert_undefined ( v )
  set ( v2 dummy2 )
  twx_assert_defined ( v2 )
  twx_tree_get ( IN_VAR v2 KEY k2 )
  twx_assert_undefined ( v2 )
  twx_test_simple_pass ()

  twx_test_simple_check ( "k/kk=v - k/kk" )
  twx_tree_init ()
  twx_tree_set ( k/kk=v )
  twx_tree_remove ( KEY k/kk )
  set ( v dummy )
  twx_assert_defined ( v )
  twx_tree_get ( IN_VAR v KEY k )
  twx_tree_assert ( TREE v )
  twx_tree_remove ( KEY k )
  set ( v dummy )
  twx_assert_defined ( v )
  twx_tree_get ( IN_VAR v KEY k )
  twx_assert_undefined ( v )
  twx_test_simple_pass ()

  twx_test_simple_check ( "k/kk=v - m|k/.*" )
  twx_tree_init ()
  twx_tree_set ( k/kk=v )
  twx_tree_remove ( KEY m|k/.*| )
  set ( v dummy )
  twx_tree_get ( IN_VAR v KEY k )
  twx_assert_undefined ( v )
  twx_test_simple_pass ()

  twx_test_simple_check ( "k/kk/kkk=v - k/kk/k" )
  twx_tree_init ()
  twx_tree_set ( k/kk/kkk=v )
  twx_tree_remove ( KEY k/kk )
  set ( v dummy )
  twx_tree_get ( IN_VAR v KEY k )
  twx_expect ( v "${/TWX/TREE/HEADER}" )
  twx_tree_remove ( KEY k )
  set ( v dummy )
  twx_tree_get ( IN_VAR v KEY k )
  twx_assert_undefined ( v )
  twx_test_simple_pass ()

  twx_test_simple_check ( "k=v - k" )
  twx_tree_init ()
  twx_tree_set ( k=v )
  set ( v "dummy" )
  twx_tree_get ( IN_VAR v KEY k )
  twx_expect ( v "v" )
  twx_tree_set ( k )
  set ( v "dummy" )
  twx_tree_get ( IN_VAR v KEY k )
  twx_assert_undefined ( v )
  twx_test_simple_pass ()
endblock ()
endif ()
twx_test_unit_pop ()

# ANCHOR: ...
twx_test_unit_push ( CORE "..." )
if ( /TWX/TEST/UNIT.RUN )
  block ()
  twx_test_simple_check ( "A/" )
  twx_tree_init ( TREE /A )
  twx_expect ( /A "${/TWX/TREE/HEADER}" )
  twx_test_simple_pass ()

  twx_test_simple_check ( "A/" )
  twx_tree_set ( TREE /A k1/k1=v11 k1/k2=v12 k2/k1=v21 k2/k2=v22 k3=v3 k4=v4 )
  twx_tree_log ( TREE /A )
  # twx_tree_prettify ( MSG "${A/}" IN_VAR pretty )
  # message ( TR@CE "A/ => ${pretty}")
  unset ( A.k1/ )
  twx_tree_get ( TREE /A IN_VAR A.k1/ KEY k1 )
  twx_assert_defined ( A.k1/ )
  twx_assert_true ( "${/TWX/IS_TREE/A.k1/}" )
  # TODO: twx_tree_assert -> twx_assert_tree
  twx_test_simple_pass ()
  
  twx_test_simple_check ( "A.k1/" )
  twx_tree_assert ( TREE A.k1/ )
  unset ( A.k1.k1/ )
  twx_tree_get ( TREE A.k1/ IN_VAR A.k1.k1/ KEY k1 )
  twx_expect ( A.k1.k1/ v11 )
  twx_test_simple_pass ()
  
  twx_test_simple_check ( "A.k1.k2/" )
  unset ( A.k1.k2/ )
  twx_tree_get ( TREE A.k1/ IN_VAR A.k1.k2/ KEY k2 )
  twx_expect ( A.k1.k2/ v12 )
  twx_test_simple_pass ()

  endblock ()
endif ()
twx_test_unit_pop ()

# ANCHOR: subtrees
twx_test_unit_push ( NAME "Trees inside trees" CORE subtrees )
if ( /TWX/TEST/UNIT.RUN )
  block ()
  twx_tree_init ( TREE /A )
  twx_tree_init ( TREE AA/ )
  twx_tree_init ( TREE AAA/ )
  twx_tree_set ( TREE AAA/ "kkk=vvv" )
  twx_tree_set ( TREE AA/  "kk=${AAA/}" )

  twx_test_simple_check ( "AA/[kk] == AAA/" )
  set ( AA.kk/ dummy )
  twx_tree_get ( TREE AA/ IN_VAR AA.kk/ KEY kk )
  twx_tree_assert ( TREE AA.kk/ )
  twx_expect ( AA.kk/ "${AAA/}" )
  twx_test_simple_pass ()

  twx_test_simple_check ( "AA/[kk/kkk] == vvv" )
  set ( v dummy )
  twx_tree_get ( TREE AA/ IN_VAR v KEY kk/kkk )
  twx_expect ( v "vvv" )
  twx_test_simple_pass ()

  twx_test_simple_check ( "AA/[k] == AA/" )
  twx_tree_set ( TREE /A  "k=${AA/}" )
  set ( v dummy )
  twx_tree_get ( TREE /A IN_VAR v KEY k )
  twx_expect ( v "${AA/}" )
  twx_test_simple_pass ()

  twx_test_simple_check ( "A/[k/kk] == AAA/" )
  set ( v dummy )
  twx_tree_get ( TREE /A IN_VAR v KEY k/kk )
  twx_expect ( v "${AAA/}" )
  twx_test_simple_pass ()
  
  twx_test_simple_check ( "A/[k/kk/kkk] == vvv" )
  set ( v dummy )
  twx_tree_get ( TREE /A IN_VAR v KEY k/kk/kkk )
  twx_expect ( v "vvv" )
  twx_test_simple_pass ()

  # Direct definition
  twx_test_simple_check ( "A/[k] == AA/(2)" )
  twx_tree_init ( TREE /A )
  twx_tree_set ( TREE /A k/kk/kkk=vvv )
  set ( v dummy )
  twx_tree_get ( TREE /A IN_VAR v KEY k )
  twx_expect ( v "${AA/}" )
  twx_test_simple_pass ()

  twx_test_simple_check ( "A/[k/kk] == AAA/(2)" )
  set ( v dummy )
  twx_tree_get ( TREE /A IN_VAR v KEY k/kk )
  twx_expect ( v "${AAA/}" )
  twx_test_simple_pass ()

  twx_test_simple_check ( "A/[k/kk/kkk] == vvv(2)" )
  set ( v dummy )
  twx_tree_get ( TREE /A IN_VAR v KEY k/kk/kkk )
  twx_expect ( v "vvv" )
  twx_test_simple_pass ()

  endblock ()
endif ()
twx_test_unit_pop ()

# ANCHOR: DEFAULT
twx_test_unit_push ( NAME "Tree with default tree" CORE DEFAULT )
if ( /TWX/TEST/UNIT.RUN )
  block ()
  twx_test_simple_check ( "Empty" )
  twx_tree_init ()
  twx_tree_get ( IN_VAR v KEY k )
  twx_assert_undefined ( v )
  twx_test_simple_pass ()

  twx_test_simple_check ( "k=v" )
  twx_tree_set ( k=v )
  twx_tree_get ( IN_VAR v KEY k )
  twx_expect ( v "v" )
  twx_test_simple_pass ()

  endblock ()
endif ()
twx_test_unit_pop ()

# ANCHOR: expose
twx_test_unit_push ( CORE expose )
if ( /TWX/TEST/UNIT.RUN )
  block ()

  twx_test_simple_check ( "Prepare k=v" )
  twx_tree_init ()
  twx_tree_set ( k=v )
  block ()
  set ( k "dummy" )
  twx_tree_get ( IN_VAR v KEY k )
  twx_expect ( v "v" )
  endblock ()
  block ()
  set ( /TWX/TREE/DEFAULT/k "dummy" )
  twx_tree_get ( KEY k )
  twx_expect ( /TWX/TREE/DEFAULT/k "v" )
  endblock ()
  twx_test_simple_pass ()

  twx_test_simple_check ( "Prepare /A/k=v" )
  twx_tree_init ( TREE /A )
  twx_tree_set ( TREE /A k=v )
  block ()
  set ( k "dummy" )
  twx_tree_get ( TREE /A IN_VAR v KEY k )
  twx_expect ( v "v" )
  endblock ()
  block ()
  set ( /A/k "dummy" )
  twx_tree_get ( TREE /A KEY k )
  twx_expect ( /A/k "v" )
  endblock ()
  twx_test_simple_pass ()

  twx_test_simple_check ( "Prepare k/kk=v" )
  twx_tree_init ()
  twx_tree_set ( k/kk=v )
  set ( v "dummy" )
  twx_tree_get ( IN_VAR v KEY k/kk )
  twx_expect ( v "v" )
  set ( TWX/TREE/DEFAULT/k/kk "dummy" )
  twx_tree_get ( KEY k/kk )
  twx_expect ( /TWX/TREE/DEFAULT/k/kk "v" )
  twx_test_simple_pass ()

  twx_test_simple_check ( "Prepare /A/k/kk=v" )
  twx_tree_init ( TREE /A )
  twx_tree_set ( TREE /A k/kk=v )
  set ( v "dummy" )
  twx_tree_get ( TREE /A IN_VAR v KEY k/kk )
  twx_expect ( v "v" )
  set ( /A/k/kk "dummy" )
  twx_tree_get ( TREE /A KEY k/kk )
  twx_expect ( /A/k/kk "v" )
  twx_test_simple_pass ()

  twx_test_simple_check ( "/A/k=v" )
  twx_tree_init ( TREE /A )
  twx_tree_assert ( TREE /A )
  set ( /A/k "dummy" )
  twx_tree_expose ( TREE /A )
  twx_expect ( /A/k "v" )
  twx_test_simple_pass ()

  twx_var_log ( /TWX/TEST/SUITE.NAME )
  twx_var_log ( /TWX/TEST/UNIT.NAME )
  message ( FATAL_ERROR "*****" )
  
  twx_test_simple_check ( "k/kk=v" )
  set ( k "dummy" )
  twx_tree_init ( TREE /A )
  twx_tree_expose ( TREE /A )
  twx_tree_assert ( TREE /A )
  set ( k/kk "dummy" )
  twx_tree_get ( TREE /A KEY k )
  twx_expect ( /TWX/TREE/EXPOSED/k/kk "v" )
  twx_test_simple_pass ()

  twx_test_simple_check ( "k=v PREFIX FOO" )
  twx_tree_init ()
  twx_tree_set ( k=v )
  set ( k "dummy" )
  twx_tree_expose ( PREFIX FOO )
  twx_expect ( FOO/k "v" )
  twx_test_simple_pass ()

  message ( FATAL_ERROR "*****" )
  twx_test_simple_check ( "k=v PREFIX /" )
  twx_tree_init ()
  twx_tree_set ( k=v )
  set ( /k "dummy" )
  twx_tree_expose ( PREFIX / )
  twx_expect ( /k "v" )
  twx_test_simple_pass ()

  message ( FATAL_ERROR "*****" )
  twx_test_simple_check ( "/k=v" )
  twx_tree_init ()
  twx_tree_set ( /k=v )
  set ( /TWX/TREE/EXPOSED//k "dummy" )
  twx_tree_expose ()
  twx_expect ( /TWX/TREE/EXPOSED//k "v" )
  twx_test_simple_pass ()
  message ( FATAL_ERROR "*****" )
  # twx_test_simple_check ( "/k=v PREFIX empty string" )
  # twx_tree_init ()
  # twx_tree_set ( /k=v )
  # set ( //k "dummy" )
  # twx_tree_expose ()
  # twx_expect ( //k "v" )
  # twx_test_simple_pass ()

  # twx_test_simple_check ( "/k=v PREFIX /FOO/" )
  # twx_tree_init ()
  # twx_tree_set ( /k=v )
  # set ( /FOO//k "dummy" )
  # twx_tree_expose ()
  # twx_expect ( /FOO//k "v" )
  # twx_test_simple_pass ()

  endblock ()
endif ()
twx_test_unit_pop ()

twx_test_stop ()

# ANCHOR: list
twx_test_unit_push ( NAME "list support" CORE list )
if ( /TWX/TEST/UNIT.RUN )
  block ()
  twx_test_simple_check ( "k=a;b" )
  twx_tree_set ( "k=a;b" )
  twx_tree_prettify ( MSG "${/TWX/TREE/DEFAULT}" IN_VAR pretty )
  set ( v "dummy" )
  twx_tree_get ( IN_VAR v KEY k )
  twx_expect ( v "a;b" )
  twx_test_simple_pass ()

  endblock ()
endif ()
twx_test_unit_pop ()

endblock ()
twx_test_suite_pop ()

#*/
