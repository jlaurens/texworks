#[===============================================[/*
This is part of the TWX build and test system.
https://github.com/TeXworks/texworks
(C)  JL 2023
*/
/** @file
  * @brief TwxArgLib test suite.
  *
  *//*
#]===============================================]

include_guard ( GLOBAL )

twx_test_suite_push ()
block ()

# ANCHOR: assert_count
twx_test_unit_push ( CORE assert_count )
if ( TWX_TEST_UNIT.RUN )
  block ()
  function ( TwxArgTest_test1 op right status )
    twx_test_simple_start ( "${ARGC} ${op} ${right}" )
    twx_arg_assert_count ( ${ARGC} ${op} ${right} )
    cmake_language ( CALL "twx_test_simple_assert_${status}" )
  endfunction ()
  TwxArgTest_test1 ( <  4 pass )
  TwxArgTest_test1 ( <  2 fail )
  TwxArgTest_test1 ( <= 4 pass )
  TwxArgTest_test1 ( <= 2 fail )
  TwxArgTest_test1 ( <= 3 pass )
  TwxArgTest_test1 ( == 3 pass )
  TwxArgTest_test1 ( == 2 fail )
  TwxArgTest_test1 ( >= 3 pass )
  TwxArgTest_test1 ( >= 4 fail )
  TwxArgTest_test1 ( >= 3 pass )
  TwxArgTest_test1 ( >  2 pass )
  TwxArgTest_test1 ( >  3 fail )
endblock ()
endif ()
twx_test_unit_pop ()

# ANCHOR: pass_option_1
twx_test_unit_push ( NAME "twx_arg_pass_option(1)" CORE pass_option_1 )
if ( TWX_TEST_UNIT.RUN )
  block ()
  set ( twx.R_CHI ON )
  twx_test_simple_start ( "CHI ON" )
  twx_arg_pass_option ( CHI )
  twx_expect ( twx.R_CHI CHI )
  twx_test_simple_assert_pass ()
  set ( twx.R_CHI OFF )
  twx_test_simple_start ( "CHI OFF" )
  twx_arg_pass_option ( CHI )
  twx_assert_undefined ( twx.R_CHI )
  twx_test_simple_assert_pass ()
  endblock ()
endif ()
twx_test_unit_pop ()

# ANCHOR: pass_option_2
twx_test_unit_push ( NAME "twx_arg_pass_option(2)" CORE pass_option_2 )
if ( TWX_TEST_UNIT.RUN )
  block ()
  function ( TwxArgTest_pass_option_2 CHI FOO )
    twx_test_simple_start ( "CHI => ``${CHI}'', FOO => ``${FOO}''" )
    set ( twx.R_CHI ${CHI} )
    set ( twx.R_FOO ${FOO} )
    twx_arg_pass_option ( CHI FOO )
    foreach ( what CHI FOO )
      if ( ${${what}} )
        twx_expect ( twx.R_${what} ${what} )
      else ()
        twx_assert_undefined ( twx.R_${what} )
      endif ()
    endforeach ()
    twx_test_simple_assert_pass ()
  endfunction ()
  TwxArgTest_pass_option_2 ( ON   ON  )
  TwxArgTest_pass_option_2 ( ON   OFF )
  TwxArgTest_pass_option_2 ( OFF  ON  )
  TwxArgTest_pass_option_2 ( OFF  OFF )
  endblock ()
endif ()
twx_test_unit_pop ()

# ANCHOR: expect_keyword
twx_test_unit_push ( CORE expect_keyword )
if ( TWX_TEST_UNIT.RUN )
  block ()
  twx_test_simple_start ( "actual => ``EXPECTED''" )
  set ( actual EXPECTED )
  twx_arg_expect_keyword ( actual "EXPECTED" )
  twx_test_simple_assert_pass ()
  twx_test_simple_start ( "actual => ``UNEXPECTED''" )
  set ( actual UNEXPECTED )
  twx_arg_expect_keyword ( actual "EXPECTED" )
  twx_test_simple_assert_fail ()
  twx_test_simple_start ( "Too many arguments" )
  twx_arg_expect_keyword ( actual actual actual )
  twx_test_simple_assert_fail ()
  # twx_test_simple_start ( "Too few arguments" )
  # twx_arg_expect_keyword ( actual )
  # twx_test_simple_assert_fail ()
  endblock ()
endif ()
twx_test_unit_pop ()

# ANCHOR: assert_keyword
twx_test_unit_push ( CORE assert_keyword )
if ( TWX_TEST_UNIT.RUN )
  block ()
  twx_test_simple_start ( "twx.R_FOO_B. => ``FOO'', twx.R_FOO_BAR. => ``FOO_BAR''" )
  set ( twx.R_FOO_B. FOO )
  set ( twx.R_FOO_BAR. FOO_BAR )
  twx_arg_assert_keyword ( twx.R_FOO_B. twx.R_FOO_BAR. )
  twx_test_simple_assert_pass ()
  
  twx_test_simple_start ( "twx.R_FOO_B. => ``FOO'', twx.R_FOO_BAR. => ``FOO_BAR''" )
  set ( twx.R_FOO_B. FOO )
  set ( twx.R_FOO_BAR. FOO_BAR )
  twx_arg_assert_keyword ( FOO_B. FOO_BAR. PREFIX twx.R )
  twx_test_simple_assert_pass ()
  
  twx_test_simple_start ( "twx.R_FOO_B. => ``FOOX'', twx.R_FOO_BAR. => ``FOO_BAR''" )
  set ( twx.R_FOO_B. FOOX )
  set ( twx.R_FOO_BAR. FOO_BAR )
  twx_arg_assert_keyword ( twx.R_FOO_B. twx.R_FOO_BAR. )
  twx_test_simple_assert_fail ()

  twx_test_simple_start ( "twx.R_FOO_B. => ``FOO'', twx.R_FOO_BAR. => ``FOO_BARX''" )
  set ( twx.R_FOO_B. FOO )
  set ( twx.R_FOO_BAR. FOO_BARX )
  twx_arg_assert_keyword ( FOO_B. FOO_BAR. PREFIX twx.R )
  twx_test_simple_assert_fail ()

  twx_test_simple_start ( "twx.R_FOO_B. => ``FOO'', twx.R_FOO_BAR. => ``FOO_BARX''" )
  set ( twx.R_FOO_B. FOO )
  set ( twx.R_FOO_BAR. FOO_BARX )
  twx_arg_assert_keyword ( twx.R_FOO_B. twx.R_FOO_BAR. )
  twx_test_simple_assert_fail ()

  twx_test_simple_start ( "twx.R_FOO_B. => ``FOO'', twx.R_FOO_BAR. => ``FOO_BARX''" )
  set ( twx.R_FOO_B. FOO )
  set ( twx.R_FOO_BAR. FOO_BARX )
  twx_arg_assert_keyword ( FOO_B. FOO_BAR. PREFIX twx.R )
  twx_test_simple_assert_fail ()

  twx_test_simple_start ( "MY_FOO_B. => ``FOO''" )
  set ( MY_FOO_B. FOO )
  twx_arg_assert_keyword ( FOO_B. PREFIX MY )
  twx_test_simple_assert_pass ()

  twx_test_simple_start ( "MY_FOO_B. => ``FOO'', MY_FOO_BAR. => ``FOO_BAR''" )
  set ( MY_FOO_B. FOO )
  set ( MY_FOO_BAR. FOO_BAR )
  twx_arg_assert_keyword ( FOO_B. FOO_BAR. PREFIX MY )
  twx_test_simple_assert_pass ()

  twx_test_simple_start ( "MY_FOO_B. => ``FOO'', MY_FOO_BAR. => ``FOO_BAR''" )
  set ( MY_FOO_B. FOO )
  set ( MY_FOO_BAR. FOO_BAR )
  twx_arg_assert_keyword ( FOO_B. FOO_BAR. PREFIX MY)
  twx_test_simple_assert_pass ()

  twx_test_simple_start ( "MY_FOO_B. => ``FOO'', MY_FOO_BAR. => ``FOO_BARX''" )
  set ( MY_FOO_B. FOO )
  set ( MY_FOO_BAR. FOO_BARX )
  twx_arg_assert_keyword ( FOO_B. FOO_BAR. PREFIX MY)
  twx_test_simple_assert_fail ()
  endblock ()
endif ()
twx_test_unit_pop ()

# ANCHOR: assert_parsed
twx_test_unit_push ( CORE "assert_parsed" )
if ( TWX_TEST_UNIT.RUN )
  block ()
  function ( TwxArgLib_assert_parsed_1 )
    string ( REPLACE ";" " " pretty_ "${ARGV}" )
    twx_test_simple_start ( "${pretty_}" )
    cmake_parse_arguments ( twx.R "" "KEY;STATUS" "" ${ARGV} )
    twx_arg_assert_parsed ()
    cmake_language ( CALL "twx_test_simple_assert_${twx.R_STATUS}" )
  endfunction()
  TwxArgLib_assert_parsed_1 ( STATUS pass )
  TwxArgLib_assert_parsed_1 ( KEY key STATUS pass )
  TwxArgLib_assert_parsed_1 ( youpi   STATUS fail )
  endblock ()
endif ()
twx_test_unit_pop ()

endblock ()

twx_test_suite_pop ()

#*/
