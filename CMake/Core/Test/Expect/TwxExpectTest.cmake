#[===============================================[/*
This is part of the TWX build and test system.
https://github.com/TeXworks/texworks
(C)  JL 2023
*/
/** @file
  * @brief Testing Expect.
  *
  * First test.
  *//*
#]===============================================]

include_guard ( GLOBAL )

twx_test_suite_push ()
block ()

twx_test_unit_push ( NAME "twx_expect_equal_string" CORE equal_string )
if ( TWX_TEST_UNIT.RUN )
  block ()
  twx_test_simple_start ( "``''==``''" )
  twx_expect_equal_string ( "" "" )
  twx_test_simple_assert_pass ()
  twx_test_simple_start ( "``ABC''==``ABC''" )
  twx_expect_equal_string ( "ABC" "ABC" )
  twx_test_simple_assert_pass ()
  twx_test_simple_start ( "``ABC''==``DEF''" )
  twx_expect_equal_string ( "ABC" "DEF" )
  twx_test_simple_assert_fail ()
  twx_test_simple_start ( "``ABC''==``DEF''" )
  set ( DEF "ABC" )
  twx_expect_equal_string ( "ABC" "DEF" )
  twx_test_simple_assert_fail ()
  endblock ()
endif ()
twx_test_unit_pop ()

twx_test_unit_push ( NAME "twx_expect_unequal_string" CORE unequal_string )
if ( TWX_TEST_UNIT.RUN )
  block ()
  twx_test_simple_start ( "``''!=``''" )
  twx_expect_unequal_string ( "" "" )
  twx_test_simple_assert_fail ()
  twx_test_simple_start ( "``ABC''!=``ABC''" )
  twx_expect_unequal_string ( "" "" )
  twx_test_simple_assert_fail ()
  twx_test_simple_start ( "``ABC''!=``DEF''" )
  twx_expect_unequal_string ( "ABC" "DEF" )
  twx_test_simple_assert_pass ()
  twx_test_simple_start ( "``ABC''!=``DEF''" )
  set ( ABC DEF )
  twx_expect_unequal_string ( "ABC" "DEF" )
  twx_test_simple_assert_pass ()
  endblock ()
endif ()
twx_test_unit_pop ()

twx_test_unit_push ( NAME "twx_expect_equal_number" CORE equal_number )
if ( TWX_TEST_UNIT.RUN )
  block ()
  twx_test_simple_start ( "4==4" )
  twx_expect_equal_number ( 4 4 )
  twx_test_simple_assert_pass ()
  twx_test_simple_start ( "4==0x4" )
  twx_expect_equal_number ( 4 0x4 )
  twx_test_simple_assert_pass ()
  twx_test_simple_start ( "4==0x4(2)" )
  set ( 0x4 5 )
  twx_expect_equal_number ( 4 0x4 )
  twx_test_simple_assert_pass ()
  twx_test_simple_start ( "4==0x44" )
  twx_expect_equal_number ( 4 0x44 )
  twx_test_simple_assert_fail ()
  twx_test_simple_start ( "0x44==4" )
  twx_expect_equal_number ( 0x44 4 )
  twx_test_simple_assert_fail ()
  twx_test_simple_start ( "0x44==4(2)" )
  set ( 0x44 4 )
  twx_expect_equal_number ( 0x44 4 )
  twx_test_simple_assert_fail ()
  endblock ()
endif ()
twx_test_unit_pop ()

twx_test_unit_push ( NAME "twx_expect_unequal_number" CORE unequal_number )
if ( TWX_TEST_UNIT.RUN )
  block ()
  twx_test_simple_start ( "4!=4" )
  twx_expect_unequal_number ( 4 4 )
  twx_test_simple_assert_fail ()
  twx_test_simple_start ( "4!=5" )
  twx_expect_unequal_number ( 4 5 )
  twx_test_simple_assert_pass ()
  twx_test_simple_start ( "4!=0x4" )
  twx_expect_unequal_number ( 4 0x4 )
  twx_test_simple_assert_fail ()
  twx_test_simple_start ( "4!=0x4(<=5)" )
  set ( 0x4 5 )
  twx_expect_unequal_number ( 4 0x4 )
  twx_test_simple_assert_fail ()
  twx_test_simple_start ( "4!=0x44" )
  set ( 0x44 4 )
  twx_expect_unequal_number ( 4 0x44 )
  twx_test_simple_assert_pass ()
  endblock ()
endif ()
twx_test_unit_pop ()

twx_test_unit_push ( NAME "twx_expect" CORE expect )
if ( TWX_TEST_UNIT.RUN )
  block ()
  twx_test_simple_start ( "ABC(<=DEF)==DEF" )
  set ( ABC DEF )
  twx_expect ( ABC DEF )
  twx_test_simple_assert_pass ()
  twx_test_simple_start ( "ABC(UNDEFINED)==DEF" )
  set ( ABC )
  twx_expect ( ABC DEF )
  twx_test_simple_assert_fail ()
  twx_test_simple_start ( "ABC(UNDEFINED)==DEF(<=ABC)" )
  set ( ABC )
  set ( DEF ABC )
  twx_expect ( ABC DEF )
  twx_test_simple_assert_fail ()
  twx_test_simple_start ( "ABC(<=4)==0x4" )
  set ( ABC 4 )
  twx_expect ( ABC 0x4 )
  twx_test_simple_assert_fail ()
  twx_test_simple_start ( "NUMBER: ABC(<=4)==0x4" )
  set ( ABC 4 )
  twx_expect ( ABC 0x4 NUMBER )
  twx_test_simple_assert_pass ()
  endblock ()
endif ()
twx_test_unit_pop ()

twx_test_unit_push ( NAME "twx_unexpect" CORE unexpect )
if ( TWX_TEST_UNIT.RUN )
  block ()
  twx_test_simple_start ( "ABC(<=ABC)!=DEF(UNDEFINED)" )
  set ( ABC ABC )
  set ( DEF )
  twx_unexpect ( ABC DEF )
  twx_test_simple_assert_pass ()
  twx_test_simple_start ( "ABC(<=DEF)!=DEF(UNDEFINED)" )
  set ( ABC DEF )
  set ( DEF )
  twx_unexpect ( ABC DEF )
  twx_test_simple_assert_fail ()
  twx_test_simple_start ( "ABC(<=ABC)!=DEF(<=ABC)" )
  set ( ABC ABC )
  set ( DEF ABC )
  twx_unexpect ( ABC DEF )
  twx_test_simple_assert_pass ()
  twx_test_simple_start ( "ABC(<=DEF)!=DEF(<=ABC)" )
  set ( ABC DEF )
  set ( DEF ABC )
  twx_unexpect ( ABC DEF )
  twx_test_simple_assert_fail ()
  twx_test_simple_start ( "ABC(<=ABC)!=ABC" )
  set ( ABC ABC )
  twx_unexpect ( ABC ABC )
  twx_test_simple_assert_fail ()
  twx_test_simple_start ( "ABC(<=DEF)!=ABC" )
  set ( ABC DEF )
  twx_unexpect ( ABC ABC )
  twx_test_simple_assert_pass ()
  twx_test_simple_start ( "ABC(<=4)!=0x4" )
  set ( ABC 4 )
  twx_unexpect ( ABC 0x4 )
  twx_test_simple_assert_pass ()
  twx_test_simple_start ( "NUMBER: ABC(<=4)!=0x4" )
  set ( ABC 4 )
  twx_unexpect ( ABC 0x4 NUMBER )
  twx_test_simple_assert_fail ()
  endblock ()
endif ()
twx_test_unit_pop ()

twx_test_unit_push ( NAME "twx_expect_matches" CORE matches )
if ( TWX_TEST_UNIT.RUN )
  block ()
  twx_test_simple_start ( "``ABC'' MATCHES ``^...$''" )
  twx_expect_matches ( "ABC" "^...$" )
  twx_test_simple_assert_pass ()
  twx_test_simple_start ( "``ABC'' MATCHES ``^..$''" )
  twx_expect_matches ( "ABC" "^..$" )
  twx_test_simple_assert_fail ()
  endblock ()
endif ()
twx_test_unit_pop ()

twx_test_unit_push ( NAME "twx_expect_unmatches" CORE unmatches )
if ( TWX_TEST_UNIT.RUN )
  block ()
  twx_test_simple_start ( "``ABC'' UNMATCHES ``^...$''" )
  twx_expect_unmatches ( "ABC" "^...$" )
  twx_test_simple_assert_fail ()
  twx_test_simple_start ( "``ABC'' UNMATCHES ``^..$''" )
  twx_expect_unmatches ( "ABC" "^..$" )
  twx_test_simple_assert_pass ()
  endblock ()
endif ()
twx_test_unit_pop ()

endblock ()
twx_test_suite_pop ()

#*/
